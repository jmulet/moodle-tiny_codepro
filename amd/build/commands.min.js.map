{"version":3,"file":"commands.min.js","sources":["../src/commands.js"],"sourcesContent":["/* eslint-disable camelcase */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny CodePro plugin.\n *\n * @module      tiny_codepro/plugin\n * @copyright   2023-2025 Josep Mulet Pol <pep.mulet@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getButtonImage} from 'editor_tiny/utils';\nimport {get_strings} from 'core/str';\nimport {ViewDialogManager} from './viewdialog';\nimport {component, icon} from './common';\nimport {getValidElements, getValidChildren, getCustomElements, getDefaultUI, isPluginVisible} from './options';\nimport {ViewPanelManager} from './viewpanel';\nimport {getPref, setPref} from './preferences';\n\n/**\n * Setups the TinyMCE editor\n * @returns {Promise<(editor: TinyMCE)=>void>}\n */\nexport const getSetup = async() => {\n    const [\n        strs,\n        buttonImage,\n    ] = await Promise.all([\n        get_strings([\n            {key: 'pluginname', component},\n            {key: 'opendialog', component},\n            {key: 'fullscreen', component},\n            {key: 'themes', component},\n            {key: 'linewrap', component},\n            {key: 'prettify', component},\n            {key: 'decreasefontsize', component},\n            {key: 'increasefontsize', component}\n        ]),\n        getButtonImage('icon', component),\n    ]);\n\n    const [pluginName, ...translations] = strs;\n\n    return async(editor) => {\n        if (!isPluginVisible(editor)) {\n            // Must register the menu items with the basic code editor command.\n            editor.ui.registry.addMenuItem(component, {\n                icon: 'sourcecode',\n                text: 'Source code',\n                onAction: () => editor.execCommand(\"mceCodeEditor\", false)\n            });\n            return;\n        }\n\n        editor.on('PreInit', () => {\n            const schema = editor.parser?.schema;\n            if (!schema) {\n                return;\n            }\n            // Apply HTML filtering options to the editor parser instance.\n            const customElements = (getCustomElements(editor) ?? '').trim();\n            if (customElements) {\n                schema.addCustomElements(customElements);\n            }\n\n            const validElements = (getValidElements(editor) ?? '').trim();\n            if (validElements) {\n                schema.addValidElements(validElements);\n            }\n\n            const validChildren = (getValidChildren(editor) ?? '').trim();\n            if (validChildren) {\n                schema.addValidChildren(validChildren);\n            }\n        });\n\n        // Register the Icon.\n        editor.ui.registry.addIcon(icon, buttonImage.html);\n\n        /**\n         * Lazy init viewManagers\n         * @type {Record<string, import('./viewmanager').ViewManager>}\n         */\n        const _viewManagers = {};\n        /**\n         * @param {string} name\n         * @returns {import('./viewmanager').ViewManager}\n         **/\n        const getViewManager = (name) => {\n            let instance = _viewManagers[name];\n            if (instance) {\n                return instance;\n            }\n            if (name === 'panel') {\n               instance = new ViewPanelManager(editor, {autosave: true, translations});\n            } else {\n               instance = new ViewDialogManager(editor);\n            }\n            _viewManagers[name] = instance;\n            return instance;\n        };\n\n        // Add command to show the code editor.\n        editor.addCommand(\"mceCodeProEditor\", () => {\n            let uiMode = getDefaultUI(editor) ?? 'dialog';\n            if (uiMode.startsWith('user:')) {\n                uiMode = getPref('view', uiMode.substring(5));\n            }\n            // Make sure preference is in sync\n            setPref('view', uiMode);\n            getViewManager(uiMode).show();\n        });\n\n        // Register the Toolbar Button.\n        editor.ui.registry.addButton(component, {\n            icon,\n            tooltip: pluginName,\n            onAction: () => editor.execCommand(\"mceCodeProEditor\", false)\n        });\n\n        // Add the Menu Item.\n        // This allows it to be added to a standard menu, or a context menu.\n        editor.ui.registry.addMenuItem(component, {\n            icon,\n            text: pluginName,\n            onAction: () => editor.execCommand(\"mceCodeProEditor\", false)\n        });\n\n        // Creates a View for holding the code editor as a panel\n        // Only if it is going to be required\n        const defaultUI = getDefaultUI(editor) ?? '';\n        if (defaultUI === 'panel' || defaultUI.startsWith('user:')) {\n            getViewManager('panel')._tCreate();\n        }\n    };\n};"],"names":["async","strs","buttonImage","Promise","all","key","component","pluginName","translations","editor","ui","registry","addMenuItem","icon","text","onAction","execCommand","on","schema","parser","_editor$parser","customElements","trim","addCustomElements","validElements","addValidElements","validChildren","addValidChildren","addIcon","html","_viewManagers","getViewManager","name","instance","ViewPanelManager","autosave","ViewDialogManager","addCommand","uiMode","startsWith","substring","show","addButton","tooltip","defaultUI","_tCreate"],"mappings":"sUAoCwBA,gBAEhBC,KACAC,mBACMC,QAAQC,IAAI,EAClB,oBAAY,CACR,CAACC,IAAK,aAAcC,UAAAA,mBACpB,CAACD,IAAK,aAAcC,UAAAA,mBACpB,CAACD,IAAK,aAAcC,UAAAA,mBACpB,CAACD,IAAK,SAAUC,UAAAA,mBAChB,CAACD,IAAK,WAAYC,UAAAA,mBAClB,CAACD,IAAK,WAAYC,UAAAA,mBAClB,CAACD,IAAK,mBAAoBC,UAAAA,mBAC1B,CAACD,IAAK,mBAAoBC,UAAAA,sBAE9B,yBAAe,OAAQA,sBAGpBC,cAAeC,cAAgBP,YAE/BD,MAAAA,cACE,4BAAgBS,oBAEjBA,OAAOC,GAAGC,SAASC,YAAYN,kBAAW,CACtCO,KAAM,aACNC,KAAM,cACNC,SAAU,IAAMN,OAAOO,YAAY,iBAAiB,KAK5DP,OAAOQ,GAAG,WAAW,8BACXC,8BAAST,OAAOU,wCAAPC,eAAeF,WACzBA,oBAICG,iBAAkB,8BAAkBZ,SAAW,IAAIa,OACrDD,gBACAH,OAAOK,kBAAkBF,sBAGvBG,gBAAiB,6BAAiBf,SAAW,IAAIa,OACnDE,eACAN,OAAOO,iBAAiBD,qBAGtBE,gBAAiB,6BAAiBjB,SAAW,IAAIa,OACnDI,eACAR,OAAOS,iBAAiBD,kBAKhCjB,OAAOC,GAAGC,SAASiB,QAAQf,aAAMX,YAAY2B,YAMvCC,cAAgB,GAKhBC,eAAkBC,WAChBC,SAAWH,cAAcE,aACzBC,WAIDA,SADU,UAATD,KACU,IAAIE,4BAAiBzB,OAAQ,CAAC0B,UAAU,EAAM3B,aAAAA,eAE9C,IAAI4B,8BAAkB3B,QAEpCqB,cAAcE,MAAQC,SACfA,WAIXxB,OAAO4B,WAAW,oBAAoB,SAC9BC,QAAS,yBAAa7B,SAAW,SACjC6B,OAAOC,WAAW,WAClBD,QAAS,wBAAQ,OAAQA,OAAOE,UAAU,8BAGtC,OAAQF,QAChBP,eAAeO,QAAQG,UAI3BhC,OAAOC,GAAGC,SAAS+B,UAAUpC,kBAAW,CACpCO,KAAAA,aACA8B,QAASpC,WACTQ,SAAU,IAAMN,OAAOO,YAAY,oBAAoB,KAK3DP,OAAOC,GAAGC,SAASC,YAAYN,kBAAW,CACtCO,KAAAA,aACAC,KAAMP,WACNQ,SAAU,IAAMN,OAAOO,YAAY,oBAAoB,WAKrD4B,WAAY,yBAAanC,SAAW,IACxB,UAAdmC,WAAyBA,UAAUL,WAAW,WAC9CR,eAAe,SAASc"}