{"version":3,"file":"commands.min.js","sources":["../src/commands.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny CodePro plugin.\n *\n * @module      tiny_codepro/plugin\n * @copyright   2023 Josep Mulet Pol <pep.mulet@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getButtonImage} from 'editor_tiny/utils';\nimport {get_string as getString} from 'core/str';\nimport {handleAction} from './ui';\nimport {component, icon} from './common';\nimport {getDefaultUI, isPluginVisible} from './options';\nimport {createView} from './view';\nimport {getPref} from './preferences';\n\nexport const getSetup = async() => {\n    const [\n        pluginName,\n        buttonImage,\n    ] = await Promise.all([\n        getString('pluginname', component),\n        getButtonImage('icon', component),\n    ]);\n\n    const handleClickAction = (editor) => {\n        const defaultUI = getPref('view', getDefaultUI(editor) ?? 'dialogue');\n        if (defaultUI === 'dialogue') {\n            // Show editor in a modal dialogue\n            handleAction(editor);\n        } else {\n            // Show editor as a view panel\n            editor.execCommand('ToggleView', false, 'codepro');\n        }\n    };\n\n    return (editor) => {\n        if (!isPluginVisible(editor)) {\n            return;\n        }\n        // Register the Icon.\n        editor.ui.registry.addIcon(icon, buttonImage.html);\n\n        // Register the Toolbar Button.\n        editor.ui.registry.addButton(component, {\n            icon,\n            tooltip: pluginName,\n            onAction: () => handleClickAction(editor)\n        });\n\n        // Add the Menu Item.\n        // This allows it to be added to a standard menu, or a context menu.\n        editor.ui.registry.addMenuItem(component, {\n            icon,\n            text: pluginName,\n            onAction: () => handleClickAction(editor)\n        });\n\n        // Creates a View for holding the code editor\n        editor.ui.registry.addView('codepro', createView(editor));\n    };\n};"],"names":["async","pluginName","buttonImage","Promise","all","component","handleClickAction","editor","execCommand","ui","registry","addIcon","icon","html","addButton","tooltip","onAction","addMenuItem","text","addView"],"mappings":"4SA+BwBA,gBAEhBC,WACAC,mBACMC,QAAQC,IAAI,EAClB,mBAAU,aAAcC,oBACxB,yBAAe,OAAQA,qBAGrBC,kBAAqBC,SAEL,cADA,wBAAQ,QAAQ,yBAAaA,SAAW,iCAGzCA,QAGbA,OAAOC,YAAY,cAAc,EAAO,mBAIxCD,UACC,4BAAgBA,UAIrBA,OAAOE,GAAGC,SAASC,QAAQC,aAAMV,YAAYW,MAG7CN,OAAOE,GAAGC,SAASI,UAAUT,kBAAW,CACpCO,KAAAA,aACAG,QAASd,WACTe,SAAU,IAAMV,kBAAkBC,UAKtCA,OAAOE,GAAGC,SAASO,YAAYZ,kBAAW,CACtCO,KAAAA,aACAM,KAAMjB,WACNe,SAAU,IAAMV,kBAAkBC,UAItCA,OAAOE,GAAGC,SAASS,QAAQ,WAAW,oBAAWZ"}