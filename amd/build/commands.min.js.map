{"version":3,"file":"commands.min.js","sources":["../src/commands.js"],"sourcesContent":["/* eslint-disable camelcase */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny CodePro plugin.\n *\n * @module      tiny_codepro/plugin\n * @copyright   2023-2025 Josep Mulet Pol <pep.mulet@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getButtonImage} from 'editor_tiny/utils';\nimport {get_strings} from 'core/str';\nimport {showDialog} from './viewdialog';\nimport {component, icon} from './common';\nimport {getDefaultUI, isPluginVisible} from './options';\nimport {createView} from './viewpanel';\nimport {getPref} from './preferences';\n\n/**\n * Share the state among editor Views\n * @type {*}\n **/\nexport const blackboard = {\n};\n\n/**\n * Loads cm6 on demand (The first load will be delayed a little bit)\n * @returns {Promise<CodeProEditor>}\n */\nexport const requireCm6Pro = () => {\n    return new Promise((resolve) => {\n        require(['tiny_codepro/cm6pro-lazy'], (CodeProEditor) => {\n            resolve(CodeProEditor);\n        });\n    });\n};\n\n/**\n * Setups the TinyMCE editor\n * @returns {Promise<(editor: TinyMCE)=>void>}\n */\nexport const getSetup = async() => {\n    const [\n        strs,\n        buttonImage,\n    ] = await Promise.all([\n        get_strings([\n            {key: 'pluginname', component},\n            {key: 'opendialog', component},\n            {key: 'fullscreen', component},\n            {key: 'themes', component},\n            {key: 'linewrap', component},\n            {key: 'prettify', component},\n        ]),\n        getButtonImage('icon', component),\n    ]);\n\n    const [pluginName, translations] = strs;\n\n    return async(editor) => {\n        if (!isPluginVisible(editor)) {\n            return;\n        }\n        // Register the Icon.\n        editor.ui.registry.addIcon(icon, buttonImage.html);\n\n         // Add command to show the code editor.\n         editor.addCommand(\"mceCodeProEditor\", () => {\n            let defaultUI = getDefaultUI(editor) ?? 'dialog';\n            const canUserSwitchUI = defaultUI.startsWith('user:');\n            if (canUserSwitchUI) {\n                defaultUI = getPref('view', defaultUI.substring(5));\n            }\n            if (defaultUI === 'dialog') {\n                // Show editor in a modal dialog\n                showDialog(editor);\n            } else {\n                // Show editor as a view panel\n                editor.execCommand('ToggleView', false, 'codepro');\n            }\n        });\n\n        // Register the Toolbar Button.\n        editor.ui.registry.addButton(component, {\n            icon,\n            tooltip: pluginName,\n            onAction: () => editor.execCommand(\"mceCodeProEditor\", false)\n        });\n\n        // Add the Menu Item.\n        // This allows it to be added to a standard menu, or a context menu.\n        editor.ui.registry.addMenuItem(component, {\n            icon,\n            text: pluginName,\n            onAction: () => editor.execCommand(\"mceCodeProEditor\", false)\n        });\n\n        // Creates a View for holding the code editor as panel\n        // Only if it is going to be required\n        const defaultUI = getDefaultUI(editor) ?? '';\n        if (defaultUI === 'panel' || defaultUI.startsWith('user:')) {\n            editor.ui.registry.addView('codepro', createView(editor, translations));\n        }\n    };\n};"],"names":["Promise","resolve","require","CodeProEditor","async","strs","buttonImage","all","key","component","pluginName","translations","editor","ui","registry","addIcon","icon","html","addCommand","defaultUI","startsWith","substring","execCommand","addButton","tooltip","onAction","addMenuItem","text","addView"],"mappings":"mXAoC0B,0BAOG,IAClB,IAAIA,SAASC,UAChBC,QAAQ,CAAC,6BAA8BC,gBACnCF,QAAQE,uCASIC,gBAEhBC,KACAC,mBACMN,QAAQO,IAAI,EAClB,oBAAY,CACR,CAACC,IAAK,aAAcC,UAAAA,mBACpB,CAACD,IAAK,aAAcC,UAAAA,mBACpB,CAACD,IAAK,aAAcC,UAAAA,mBACpB,CAACD,IAAK,SAAUC,UAAAA,mBAChB,CAACD,IAAK,WAAYC,UAAAA,mBAClB,CAACD,IAAK,WAAYC,UAAAA,sBAEtB,yBAAe,OAAQA,sBAGpBC,WAAYC,cAAgBN,YAE5BD,MAAAA,cACE,4BAAgBQ,eAIrBA,OAAOC,GAAGC,SAASC,QAAQC,aAAMV,YAAYW,MAG5CL,OAAOM,WAAW,oBAAoB,SAC/BC,WAAY,yBAAaP,SAAW,SAChBO,UAAUC,WAAW,WAEzCD,WAAY,wBAAQ,OAAQA,UAAUE,UAAU,KAElC,WAAdF,qCAEWP,QAGXA,OAAOU,YAAY,cAAc,EAAO,cAKhDV,OAAOC,GAAGC,SAASS,UAAUd,kBAAW,CACpCO,KAAAA,aACAQ,QAASd,WACTe,SAAU,IAAMb,OAAOU,YAAY,oBAAoB,KAK3DV,OAAOC,GAAGC,SAASY,YAAYjB,kBAAW,CACtCO,KAAAA,aACAW,KAAMjB,WACNe,SAAU,IAAMb,OAAOU,YAAY,oBAAoB,WAKrDH,WAAY,yBAAaP,SAAW,IACxB,UAAdO,WAAyBA,UAAUC,WAAW,WAC9CR,OAAOC,GAAGC,SAASc,QAAQ,WAAW,yBAAWhB,OAAQD"}