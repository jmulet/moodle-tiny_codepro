{"version":3,"file":"commands.min.js","sources":["../src/commands.js"],"sourcesContent":["/* eslint-disable camelcase */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny CodePro plugin.\n *\n * @module      tiny_codepro/plugin\n * @copyright   2023-2025 Josep Mulet Pol <pep.mulet@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getButtonImage} from 'editor_tiny/utils';\nimport {get_strings} from 'core/str';\nimport {ViewDialogManager} from './viewdialog';\nimport {component, icon} from './common';\nimport {getCustomElements, getDefaultUI, isPluginVisible} from './options';\nimport {ViewPanelManager} from './viewpanel';\nimport {getPref, setPref} from './preferences';\n\n/**\n * Setups the TinyMCE editor\n * @returns {Promise<(editor: TinyMCE)=>void>}\n */\nexport const getSetup = async() => {\n    const [\n        strs,\n        buttonImage,\n    ] = await Promise.all([\n        get_strings([\n            {key: 'pluginname', component},\n            {key: 'opendialog', component},\n            {key: 'fullscreen', component},\n            {key: 'themes', component},\n            {key: 'linewrap', component},\n            {key: 'prettify', component},\n            {key: 'decreasefontsize', component},\n            {key: 'increasefontsize', component}\n        ]),\n        getButtonImage('icon', component),\n    ]);\n\n    const [pluginName, ...translations] = strs;\n\n    return async(editor) => {\n        if (!isPluginVisible(editor)) {\n            return;\n        }\n\n        // Add custom elements to the editor\n        const customElements = (getCustomElements(editor) ?? '').trim();\n        if (customElements) {\n            editor.once('BeforeSetContent', () => editor.parser?.schema?.addCustomElements(customElements));\n        }\n\n        // Register the Icon.\n        editor.ui.registry.addIcon(icon, buttonImage.html);\n\n        /**\n         * Lazy init viewManagers\n         * @type {Record<string, import('./viewmanager').ViewManager>}\n         */\n        const _viewManagers = {};\n        /**\n         * @param {string} name\n         * @returns {import('./viewmanager').ViewManager}\n         **/\n        const getViewManager = (name) => {\n            let instance = _viewManagers[name];\n            if (instance) {\n                return instance;\n            }\n            if (name === 'panel') {\n               instance = new ViewPanelManager(editor, {autosave: true, translations});\n            } else {\n               instance = new ViewDialogManager(editor);\n            }\n            _viewManagers[name] = instance;\n            return instance;\n        };\n\n        // Add command to show the code editor.\n        editor.addCommand(\"mceCodeProEditor\", () => {\n            let uiMode = getDefaultUI(editor) ?? 'dialog';\n            const canuserswitchui = uiMode.startsWith('user:');\n            if (canuserswitchui) {\n                uiMode = getPref('view', uiMode.substring(5));\n            }\n            // Make sure preference is in sync\n            setPref('view', uiMode);\n            getViewManager(uiMode).show();\n        });\n\n        // Register the Toolbar Button.\n        editor.ui.registry.addButton(component, {\n            icon,\n            tooltip: pluginName,\n            onAction: () => editor.execCommand(\"mceCodeProEditor\", false)\n        });\n\n        // Add the Menu Item.\n        // This allows it to be added to a standard menu, or a context menu.\n        editor.ui.registry.addMenuItem(component, {\n            icon,\n            text: pluginName,\n            onAction: () => editor.execCommand(\"mceCodeProEditor\", false)\n        });\n\n        // Creates a View for holding the code editor as a panel\n        // Only if it is going to be required\n        const defaultUI = getDefaultUI(editor) ?? '';\n        if (defaultUI === 'panel' || defaultUI.startsWith('user:')) {\n            getViewManager('panel')._tCreate();\n        }\n    };\n};"],"names":["async","strs","buttonImage","Promise","all","key","component","pluginName","translations","editor","customElements","trim","once","parser","_editor$parser","schema","_editor$parser$schema","addCustomElements","ui","registry","addIcon","icon","html","_viewManagers","getViewManager","name","instance","ViewPanelManager","autosave","ViewDialogManager","addCommand","uiMode","startsWith","substring","show","addButton","tooltip","onAction","execCommand","addMenuItem","text","defaultUI","_tCreate"],"mappings":"sUAoCwBA,gBAEhBC,KACAC,mBACMC,QAAQC,IAAI,EAClB,oBAAY,CACR,CAACC,IAAK,aAAcC,UAAAA,mBACpB,CAACD,IAAK,aAAcC,UAAAA,mBACpB,CAACD,IAAK,aAAcC,UAAAA,mBACpB,CAACD,IAAK,SAAUC,UAAAA,mBAChB,CAACD,IAAK,WAAYC,UAAAA,mBAClB,CAACD,IAAK,WAAYC,UAAAA,mBAClB,CAACD,IAAK,mBAAoBC,UAAAA,mBAC1B,CAACD,IAAK,mBAAoBC,UAAAA,sBAE9B,yBAAe,OAAQA,sBAGpBC,cAAeC,cAAgBP,YAE/BD,MAAAA,cACE,4BAAgBS,qBAKfC,iBAAkB,8BAAkBD,SAAW,IAAIE,OACrDD,gBACAD,OAAOG,KAAK,oBAAoB,4EAAMH,OAAOI,gEAAPC,eAAeC,+CAAfC,sBAAuBC,kBAAkBP,mBAInFD,OAAOS,GAAGC,SAASC,QAAQC,aAAMnB,YAAYoB,YAMvCC,cAAgB,GAKhBC,eAAkBC,WAChBC,SAAWH,cAAcE,aACzBC,WAIDA,SADU,UAATD,KACU,IAAIE,4BAAiBlB,OAAQ,CAACmB,UAAU,EAAMpB,aAAAA,eAE9C,IAAIqB,8BAAkBpB,QAEpCc,cAAcE,MAAQC,SACfA,WAIXjB,OAAOqB,WAAW,oBAAoB,SAC9BC,QAAS,yBAAatB,SAAW,SACbsB,OAAOC,WAAW,WAEtCD,QAAS,wBAAQ,OAAQA,OAAOE,UAAU,8BAGtC,OAAQF,QAChBP,eAAeO,QAAQG,UAI3BzB,OAAOS,GAAGC,SAASgB,UAAU7B,kBAAW,CACpCe,KAAAA,aACAe,QAAS7B,WACT8B,SAAU,IAAM5B,OAAO6B,YAAY,oBAAoB,KAK3D7B,OAAOS,GAAGC,SAASoB,YAAYjC,kBAAW,CACtCe,KAAAA,aACAmB,KAAMjC,WACN8B,SAAU,IAAM5B,OAAO6B,YAAY,oBAAoB,WAKrDG,WAAY,yBAAahC,SAAW,IACxB,UAAdgC,WAAyBA,UAAUT,WAAW,WAC9CR,eAAe,SAASkB"}