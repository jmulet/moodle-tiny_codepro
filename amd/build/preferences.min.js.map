{"version":3,"file":"preferences.min.js","sources":["../src/preferences.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny CodePro plugin.\n *\n * @module      tiny_codepro/plugin\n * @copyright   2023-2025 Josep Mulet Pol <pep.mulet@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nconst defaultPrefs = {\n    theme: \"light\", /** Light vs dark themes */\n    wrap: true, /** Wrap long lines */\n    fs: false, /** Fullscreen mode */\n    fontsize: 11, /** Editor fontsize */\n    minimap: true, /** VScode like minimap */\n    view: undefined, /** Which UI is used to display the HTML editor */\n};\n\nconst loadPrefs = () => {\n    const storedPreferences = localStorage.getItem(\"tiny-codepro\");\n    let storedParsed = {};\n    if (storedPreferences) {\n        try {\n            storedParsed = JSON.parse(storedPreferences);\n        } catch (ex) {\n            // eslint-disable-next-line no-console\n            console.error(\"Cannot parse JSON\", storedPreferences);\n        }\n    }\n    return {...defaultPrefs, ...storedParsed};\n};\n\nconst preferences = loadPrefs();\n\n/**\n * @param {string} key The preference key\n * @param {*} [def] The default value (optional)\n * @returns the preference value\n */\nconst getPref = (key, def) => {\n    return preferences[key] ?? def;\n};\n\n/**\n * Saves the preferences\n */\nconst savePrefs = () => {\n    localStorage.setItem(\"tiny-codepro\", JSON.stringify(preferences));\n};\n\n/**\n * @param {*} key The preference key\n * @param {*} value The preference value\n * @param {*} save Whether to save the preference or not (optional)\n */\nconst setPref = (key, value, save) => {\n    preferences[key] = value;\n    if (save) {\n        // Only save this preference, keep the remaining ones intact\n        const oldPrefs = loadPrefs();\n        oldPrefs[key] = value;\n        localStorage.setItem(\"tiny-codepro\", JSON.stringify(oldPrefs));\n    }\n};\n\nexport {getPref, setPref, savePrefs};\n"],"names":["defaultPrefs","theme","wrap","fs","fontsize","minimap","view","undefined","loadPrefs","storedPreferences","localStorage","getItem","storedParsed","JSON","parse","ex","console","error","preferences","key","def","setItem","stringify","value","save","oldPrefs"],"mappings":";;;;;;;;MAuBMA,aAAe,CACjBC,MAAO,QACPC,MAAM,EACNC,IAAI,EACJC,SAAU,GACVC,SAAS,EACTC,UAAMC,GAGJC,UAAY,WACRC,kBAAoBC,aAAaC,QAAQ,oBAC3CC,aAAe,MACfH,sBAEIG,aAAeC,KAAKC,MAAML,mBAC5B,MAAOM,IAELC,QAAQC,MAAM,oBAAqBR,yBAGpC,IAAIT,gBAAiBY,eAG1BM,YAAcV,6BAOJ,CAACW,IAAKC,MACXF,YAAYC,MAAQC,uBAMb,KACdV,aAAaW,QAAQ,eAAgBR,KAAKS,UAAUJ,gCAQxC,CAACC,IAAKI,MAAOC,WACzBN,YAAYC,KAAOI,MACfC,KAAM,OAEAC,SAAWjB,YACjBiB,SAASN,KAAOI,MAChBb,aAAaW,QAAQ,eAAgBR,KAAKS,UAAUG"}