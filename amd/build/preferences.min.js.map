{"version":3,"file":"preferences.min.js","sources":["../src/preferences.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny CodePro plugin.\n *\n * @module      tiny_codepro/plugin\n * @copyright   2023-2025 Josep Mulet Pol <pep.mulet@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nconst preferences = {\n    theme: \"light\", /** Light vs dark themes */\n    wrap: false, /** Wrap long lines */\n    fs: false, /** Fullscreen mode */\n    fontsize: 11, /** Editor fontsize */\n    view: undefined, /** Which UI is used to display the HTML editor */\n};\n\nconst storedPreferences = localStorage.getItem(\"tiny-codepro\");\nif (storedPreferences) {\n    let storedParsed = {};\n    try {\n        storedParsed = JSON.parse(storedPreferences);\n    } catch (ex) {\n        // eslint-disable-next-line no-console\n        console.error(\"Cannot parse JSON\", storedPreferences);\n    }\n    Object.assign(preferences, storedParsed);\n}\n\n/**\n * @param {string} key The preference key\n * @param {*} [def] The default value (optional)\n * @returns the preference value\n */\nconst getPref = (key, def) => {\n    return preferences[key] ?? def;\n};\n\n/**\n * Saves the preferences\n */\nconst savePrefs = () => {\n    localStorage.setItem(\"tiny-codepro\", JSON.stringify(preferences));\n};\n\n/**\n * @param {*} key The preference key\n * @param {*} value The preference value\n * @param {*} save Whether to save the preference or not (optional)\n */\nconst setPref = (key, value, save) => {\n    preferences[key] = value;\n    if (save) {\n        savePrefs();\n    }\n};\n\nexport {getPref, setPref, savePrefs};\n"],"names":["preferences","theme","wrap","fs","fontsize","view","undefined","storedPreferences","localStorage","getItem","storedParsed","JSON","parse","ex","console","error","Object","assign","key","def","savePrefs","setItem","stringify","value","save"],"mappings":";;;;;;;;MAuBMA,YAAc,CAChBC,MAAO,QACPC,MAAM,EACNC,IAAI,EACJC,SAAU,GACVC,UAAMC,GAGJC,kBAAoBC,aAAaC,QAAQ,mBAC3CF,kBAAmB,KACfG,aAAe,OAEfA,aAAeC,KAAKC,MAAML,mBAC5B,MAAOM,IAELC,QAAQC,MAAM,oBAAqBR,mBAEvCS,OAAOC,OAAOjB,YAAaU,+BAQf,CAACQ,IAAKC,MACXnB,YAAYkB,MAAQC,UAMzBC,UAAY,KACdZ,aAAaa,QAAQ,eAAgBV,KAAKW,UAAUtB,6DAQxC,CAACkB,IAAKK,MAAOC,QACzBxB,YAAYkB,KAAOK,MACfC,MACAJ"}