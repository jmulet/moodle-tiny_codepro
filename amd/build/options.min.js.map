{"version":3,"file":"options.min.js","sources":["../src/options.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny CodePro plugin.\n *\n * @module      tiny_codepro/plugin\n * @copyright   2023-2025 Josep Mulet Pol <pep.mulet@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getPluginOptionName} from 'editor_tiny/options';\nimport {pluginName, isPanelCapable} from './common';\n\nconst showPlugin = getPluginOptionName(pluginName, 'showplugin');\nconst autoPrettify = getPluginOptionName(pluginName, 'autoprettify');\nconst uiMode = getPluginOptionName(pluginName, 'uimode');\nconst syncCaret = getPluginOptionName(pluginName, 'synccaret');\nconst validElements = getPluginOptionName(pluginName, 'extendedvalidelements');\nconst validChildren = getPluginOptionName(pluginName, 'validchildren');\nconst customElements = getPluginOptionName(pluginName, 'customelements');\nconst panelCapable = getPluginOptionName(pluginName, 'panelcapable');\n\n/**\n * @param {TinyMCE} editor\n * @param {string} majorVersion\n * @param {string} minorVersion\n */\nexport const register = (editor, majorVersion, minorVersion) => {\n    const registerOption = editor.options.register;\n\n    registerOption(showPlugin, {\n        processor: 'boolean',\n        \"default\": true,\n    });\n\n    registerOption(autoPrettify, {\n        processor: 'boolean',\n        \"default\": true,\n    });\n\n    registerOption(syncCaret, {\n        processor: 'string',\n        \"default\": 'both',\n    });\n\n    registerOption(uiMode, {\n        processor: 'string',\n        \"default\": 'user:dialog',\n    });\n\n    registerOption(validElements, {\n        processor: 'string',\n        \"default\": '',\n    });\n\n    registerOption(validChildren, {\n        processor: 'string',\n        \"default\": '',\n    });\n\n    registerOption(customElements, {\n        processor: 'string',\n        \"default\": '',\n    });\n\n    registerOption(panelCapable, {\n        processor: 'boolean',\n        \"default\": isPanelCapable(majorVersion, minorVersion),\n    });\n\n};\n\n\n/**\n * Get the permissions configuration for the Tiny plugin.\n *\n * @param {TinyMCE} editor\n * @returns {boolean}\n */\nexport const isPluginVisible = (editor) => editor.options.get(showPlugin);\n\n/**\n * Should prettify the HTML code when the CodeMirror editor opens?\n *\n * @param {TinyMCE} editor\n * @returns {boolean}\n */\nexport const isAutoFormatHTML = (editor) => editor.options.get(autoPrettify);\n\n/**\n * Should the cursor position be synchronized between TinyMCE and CodeMirror?\n * @param {TinyMCE} editor\n * @returns {string}\n */\nexport const getSyncCaret = (editor) => editor.options.get(syncCaret);\n\n/**\n * How to render the HTML editor?\n * dialog - It opens always as a dialog\n * panel - It opens always as a panel\n * user:dialog - The user is allowed to change the setting; defaults to dialog\n * user:panel - The user is allowed to change the setting; defaults to panel\n * @param {TinyMCE} editor\n * @returns {string}\n */\nexport const getDefaultUI = (editor) => {\n    // Version Moodle 4.1 uses Tiny 6.2.0.\n    // View API is available only since Tiny 6.6.2\n    if (typeof editor.ui.registry.addView !== 'function' || !editor.options.get(panelCapable)) {\n        return 'dialog';\n    }\n    return editor.options.get(uiMode);\n};\n\n/**\n * Determines whether the editor is in fullscreen or not\n * @param {TinyMCE} editor\n * @returns {boolean}\n */\nexport const isFullscreen = (editor) => editor.container.classList.contains('tox-fullscreen');\n\n/**\n * The valid HTML elements\n * @param {TinyMCE} editor\n * @returns {string}\n */\nexport const getValidElements = (editor) => editor.options.get(validElements);\n\n/**\n * The valid HTML children definition\n * @param {TinyMCE} editor\n * @returns {string}\n */\nexport const getValidChildren = (editor) => editor.options.get(validChildren);\n\n/**\n * The custom non-HTML standard elements\n * @param {TinyMCE} editor\n * @returns {string}\n */\nexport const getCustomElements = (editor) => editor.options.get(customElements);"],"names":["showPlugin","pluginName","autoPrettify","uiMode","syncCaret","validElements","validChildren","customElements","panelCapable","editor","majorVersion","minorVersion","registerOption","options","register","processor","get","ui","registry","addView","container","classList","contains"],"mappings":";;;;;;;;MA0BMA,YAAa,gCAAoBC,mBAAY,cAC7CC,cAAe,gCAAoBD,mBAAY,gBAC/CE,QAAS,gCAAoBF,mBAAY,UACzCG,WAAY,gCAAoBH,mBAAY,aAC5CI,eAAgB,gCAAoBJ,mBAAY,yBAChDK,eAAgB,gCAAoBL,mBAAY,iBAChDM,gBAAiB,gCAAoBN,mBAAY,kBACjDO,cAAe,gCAAoBP,mBAAY,kCAO7B,CAACQ,OAAQC,aAAcC,sBACrCC,eAAiBH,OAAOI,QAAQC,SAEtCF,eAAeZ,WAAY,CACvBe,UAAW,mBACA,IAGfH,eAAeV,aAAc,CACzBa,UAAW,mBACA,IAGfH,eAAeR,UAAW,CACtBW,UAAW,iBACA,SAGfH,eAAeT,OAAQ,CACnBY,UAAW,iBACA,gBAGfH,eAAeP,cAAe,CAC1BU,UAAW,iBACA,KAGfH,eAAeN,cAAe,CAC1BS,UAAW,iBACA,KAGfH,eAAeL,eAAgB,CAC3BQ,UAAW,iBACA,KAGfH,eAAeJ,aAAc,CACzBO,UAAW,mBACA,0BAAeL,aAAcC,0CAYhBF,QAAWA,OAAOI,QAAQG,IAAIhB,sCAQ7BS,QAAWA,OAAOI,QAAQG,IAAId,oCAOlCO,QAAWA,OAAOI,QAAQG,IAAIZ,iCAW9BK,QAGiB,mBAA/BA,OAAOQ,GAAGC,SAASC,SAA2BV,OAAOI,QAAQG,IAAIR,cAGrEC,OAAOI,QAAQG,IAAIb,QAFf,+BAUcM,QAAWA,OAAOW,UAAUC,UAAUC,SAAS,4CAO3Cb,QAAWA,OAAOI,QAAQG,IAAIX,yCAO9BI,QAAWA,OAAOI,QAAQG,IAAIV,0CAO7BG,QAAWA,OAAOI,QAAQG,IAAIT"}