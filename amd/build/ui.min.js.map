{"version":3,"file":"ui.min.js","sources":["../src/ui.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport CodeProModal from \"./modal\";\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport {getPref, setPref} from \"./preferences\";\n\n/**\n * Tiny CodePro plugin.\n *\n * @module      tiny_codepro/plugin\n * @copyright   2023 Josep Mulet Pol <pep.mulet@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nconst dialogQuery = '[role=\"document\"], [data-region=\"modal\"]';\nlet modal = null;\nlet codeEditorInstance = null;\n\n/**\n * Utility to toggle a class in an HTML element\n * @param {HTMLElement} el - The Element\n * @param {string[]} classList\n */\nconst toggleClasses = function(el, classList) {\n    const cl = el.classList;\n    classList.forEach(className => {\n        cl.toggle(className);\n    });\n};\n\n/**\n * Handle action\n * @param {TinyMCE} editor\n */\nexport const handleAction = async(editor) => {\n    if (modal === null) {\n       await createDialogue();\n    }\n    // Issue, editor var does not get updated\n    // Bind save action to the correct editor\n    const $btn = modal.footer.find(\"button.btn[data-action]\");\n    $btn.off(\"click.codepro\").on(\"click.codepro\", (evt) => {\n        if (evt.target.classList.contains(\"btn-primary\")) {\n            // eslint-disable-next-line camelcase\n            const updatedCode = codeEditorInstance.getValue({source_view: true});\n            editor.setContent(updatedCode);\n        }\n        modal.hide();\n        // Delete content\n        codeEditorInstance.setValue();\n    });\n\n    // eslint-disable-next-line camelcase\n    codeEditorInstance.setValue(editor.getContent({source_view: true}));\n    modal.show();\n    setTimeout(() => codeEditorInstance.focus(), 500);\n};\n\nconst createDialogue = async() => {\n    const data = {\n        elementid: Math.random().toString(32).substring(2)\n    };\n\n    // Show modal with buttons.\n    modal = await ModalFactory.create({\n        type: CodeProModal.TYPE,\n        templateContext: data,\n        large: true\n    });\n    modal.getRoot().find(\".modal-dialog.modal-lg\").addClass(\"tiny_codepro-dlg\");\n    // Disable keyboard events (ESC key) on this modal\n    modal.getRoot().off('keydown');\n    // Prevent modal from closing on outside clicks\n    modal.getRoot().on(ModalEvents.outsideClick, (evt) => {\n        evt.preventDefault();\n    });\n    modal.body.css(\"overflow-y\", \"overlay\");\n\n    return new Promise((resolve) => {\n        // Load cm6 on demand\n        require(['tiny_codepro/cm6pro-lazy'], (CodeProEditor) => {\n            const targetElem = modal.body.find('.tiny_codepro-editor-area')[0];\n            codeEditorInstance = new CodeProEditor(targetElem);\n\n            modal.footer.find(\"button.btn.btn-light\").on(\"click\", (evt) => {\n                evt.preventDefault();\n                const ds = evt.currentTarget.dataset;\n                const icon = evt.currentTarget.querySelector(\"i.fa\");\n                const $dlgElem = modal.getRoot().find(dialogQuery);\n                if (ds.fs) {\n                    if (ds.fs === \"false\") {\n                        // Set fullscreen mode\n                        ds.fs = \"true\";\n                        modal.header.hide();\n                        $dlgElem.removeClass(\"modal-dialog modal-lg modal-dialog-scrollable\");\n                        $dlgElem.addClass(\"tiny_codepro-fullscreen\");\n                    } else {\n                        // Set to modal-lg\n                        ds.fs = \"false\";\n                        modal.header.show();\n                        $dlgElem.removeClass(\"tiny_codepro-fullscreen\");\n                        $dlgElem.addClass(\"modal-dialog modal-lg modal-dialog-scrollable\");\n                    }\n                    setPref(\"fs\", ds.fs, true);\n                } else if (ds.theme) {\n                    if (ds.theme === \"light\") {\n                        ds.theme = \"dark\";\n                        codeEditorInstance.setTheme(\"dark\");\n                        $dlgElem.addClass(\"tiny_codepro-dark\");\n                    } else {\n                        ds.theme = \"light\";\n                        codeEditorInstance.setTheme(\"light\");\n                        $dlgElem.removeClass(\"tiny_codepro-dark\");\n                    }\n                    toggleClasses(icon, [\"fa-sun-o\", \"fa-moon-o\"]);\n                    setPref(\"theme\", ds.theme, true);\n                } else if (ds.wrap) {\n                    if (ds.wrap === \"true\") {\n                        ds.wrap = false;\n                        codeEditorInstance.setLineWrapping(false);\n                    } else {\n                        ds.wrap = true;\n                        codeEditorInstance.setLineWrapping(true);\n                    }\n                    setPref(\"wrap\", ds.wrap, true);\n                    toggleClasses(icon, [\"fa-exchange\", \"fa-long-arrow-right\"]);\n                } else if (ds.prettify) {\n                    codeEditorInstance.prettify();\n                }\n            });\n            modal.getRoot().on(ModalEvents.hidden, () => {\n                codeEditorInstance.setValue();\n            });\n\n            // Setting stored preferences\n            const currentTheme = getPref(\"theme\", \"light\");\n            const currentWrap = getPref(\"wrap\", \"false\");\n            const currentFs = getPref(\"fs\", \"false\");\n            if (currentTheme !== \"light\") {\n                modal.footer.find(\"button.btn.btn-light[data-theme]\").click();\n            }\n            if (currentWrap === \"true\") {\n                modal.footer.find(\"button.btn.btn-light[data-wrap]\").click();\n            }\n            if (currentFs === \"true\") {\n                modal.footer.find(\"button.btn.btn-light[data-fs]\").click();\n            }\n            resolve(modal);\n        });\n    });\n};"],"names":["modal","codeEditorInstance","toggleClasses","el","classList","cl","forEach","className","toggle","async","createDialogue","footer","find","off","on","evt","target","contains","updatedCode","getValue","source_view","editor","setContent","hide","setValue","getContent","show","setTimeout","focus","data","elementid","Math","random","toString","substring","ModalFactory","create","type","CodeProModal","TYPE","templateContext","large","getRoot","addClass","ModalEvents","outsideClick","preventDefault","body","css","Promise","resolve","require","CodeProEditor","targetElem","ds","currentTarget","dataset","icon","querySelector","$dlgElem","fs","header","removeClass","theme","setTheme","wrap","setLineWrapping","prettify","hidden","currentTheme","currentWrap","currentFs","click"],"mappings":";;;;;;;8OA4BIA,MAAQ,KACRC,mBAAqB,WAOnBC,cAAgB,SAASC,GAAIC,iBACzBC,GAAKF,GAAGC,UACdA,UAAUE,SAAQC,YACdF,GAAGG,OAAOD,qCAQUE,MAAAA,SACV,OAAVT,aACKU,iBAIIV,MAAMW,OAAOC,KAAK,2BAC1BC,IAAI,iBAAiBC,GAAG,iBAAkBC,SACvCA,IAAIC,OAAOZ,UAAUa,SAAS,eAAgB,OAExCC,YAAcjB,mBAAmBkB,SAAS,CAACC,aAAa,IAC9DC,OAAOC,WAAWJ,aAEtBlB,MAAMuB,OAENtB,mBAAmBuB,cAIvBvB,mBAAmBuB,SAASH,OAAOI,WAAW,CAACL,aAAa,KAC5DpB,MAAM0B,OACNC,YAAW,IAAM1B,mBAAmB2B,SAAS,YAG3ClB,eAAiBD,gBACboB,KAAO,CACTC,UAAWC,KAAKC,SAASC,SAAS,IAAIC,UAAU,WAIpDlC,YAAcmC,uBAAaC,OAAO,CAC9BC,KAAMC,eAAaC,KACnBC,gBAAiBX,KACjBY,OAAO,IAEXzC,MAAM0C,UAAU9B,KAAK,0BAA0B+B,SAAS,oBAExD3C,MAAM0C,UAAU7B,IAAI,WAEpBb,MAAM0C,UAAU5B,GAAG8B,sBAAYC,cAAe9B,MAC1CA,IAAI+B,oBAER9C,MAAM+C,KAAKC,IAAI,aAAc,WAEtB,IAAIC,SAASC,UAEhBC,QAAQ,CAAC,6BAA8BC,sBAC7BC,WAAarD,MAAM+C,KAAKnC,KAAK,6BAA6B,GAChEX,mBAAqB,IAAImD,cAAcC,YAEvCrD,MAAMW,OAAOC,KAAK,wBAAwBE,GAAG,SAAUC,MACnDA,IAAI+B,uBACEQ,GAAKvC,IAAIwC,cAAcC,QACvBC,KAAO1C,IAAIwC,cAAcG,cAAc,QACvCC,SAAW3D,MAAM0C,UAAU9B,KA1E7B,4CA2EA0C,GAAGM,IACW,UAAVN,GAAGM,IAEHN,GAAGM,GAAK,OACR5D,MAAM6D,OAAOtC,OACboC,SAASG,YAAY,iDACrBH,SAAShB,SAAS,6BAGlBW,GAAGM,GAAK,QACR5D,MAAM6D,OAAOnC,OACbiC,SAASG,YAAY,2BACrBH,SAAShB,SAAS,2EAEd,KAAMW,GAAGM,IAAI,IACdN,GAAGS,OACO,UAAbT,GAAGS,OACHT,GAAGS,MAAQ,OACX9D,mBAAmB+D,SAAS,QAC5BL,SAAShB,SAAS,uBAElBW,GAAGS,MAAQ,QACX9D,mBAAmB+D,SAAS,SAC5BL,SAASG,YAAY,sBAEzB5D,cAAcuD,KAAM,CAAC,WAAY,uCACzB,QAASH,GAAGS,OAAO,IACpBT,GAAGW,MACM,SAAZX,GAAGW,MACHX,GAAGW,MAAO,EACVhE,mBAAmBiE,iBAAgB,KAEnCZ,GAAGW,MAAO,EACVhE,mBAAmBiE,iBAAgB,6BAE/B,OAAQZ,GAAGW,MAAM,GACzB/D,cAAcuD,KAAM,CAAC,cAAe,yBAC7BH,GAAGa,UACVlE,mBAAmBkE,cAG3BnE,MAAM0C,UAAU5B,GAAG8B,sBAAYwB,QAAQ,KACnCnE,mBAAmBuB,oBAIjB6C,cAAe,wBAAQ,QAAS,SAChCC,aAAc,wBAAQ,OAAQ,SAC9BC,WAAY,wBAAQ,KAAM,SACX,UAAjBF,cACArE,MAAMW,OAAOC,KAAK,oCAAoC4D,QAEtC,SAAhBF,aACAtE,MAAMW,OAAOC,KAAK,mCAAmC4D,QAEvC,SAAdD,WACAvE,MAAMW,OAAOC,KAAK,iCAAiC4D,QAEvDtB,QAAQlD"}