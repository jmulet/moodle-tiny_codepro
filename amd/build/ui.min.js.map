{"version":3,"file":"ui.min.js","sources":["../src/ui.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport {createModal} from \"./modal\";\nimport ModalEvents from 'core/modal_events';\nimport {getPref, setPref} from \"./preferences\";\nimport {blackboard} from \"./commands\";\n\n/**\n * Tiny CodePro plugin.\n *\n * @module      tiny_codepro/plugin\n * @copyright   2023 Josep Mulet Pol <pep.mulet@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nconst dialogQuery = '[role=\"document\"], [data-region=\"modal\"]';\nlet modal = null;\nlet codeEditorInstance = null;\n\n/**\n * Utility to toggle a class in an HTML element\n * @param {HTMLElement} el - The Element\n * @param {string[]} classList\n */\nconst toggleClasses = function(el, classList) {\n    const cl = el.classList;\n    classList.forEach(className => {\n        cl.toggle(className);\n    });\n};\n\nlet isLoading = false;\n/**\n * Handle action\n * @param {TinyMCE} editor\n * @param {string} [initialHTML]\n */\nexport const displayDialogue = async(editor, initialHTML) => {\n    if (isLoading) {\n        return;\n    }\n    if (modal === null) {\n        isLoading = true;\n        modal = await createDialogue(editor);\n        isLoading = false;\n    }\n\n    // Issue, editor var does not get updated\n    // Bind save action to the correct editor\n    const $btn = modal.footer.find(\"button.btn[data-action]\");\n    $btn.off(\"click.codepro\").on(\"click.codepro\", (evt) => {\n        if (evt.target.classList.contains(\"btn-primary\")) {\n            // eslint-disable-next-line camelcase\n            const updatedCode = codeEditorInstance?.getValue({source_view: true});\n            editor.setContent(updatedCode ?? '');\n        }\n        modal.hide();\n        // Delete content\n        codeEditorInstance?.setValue();\n    });\n\n    if (blackboard.state) {\n        codeEditorInstance?.setState(blackboard.state);\n        blackboard.state = null;\n    } else {\n        // Insert caret marker and retrieve html code to pass to CodeMirror\n        let html;\n        if (initialHTML) {\n            html = initialHTML;\n        } else {\n            const markerNode = document.createElement(\"SPAN\");\n            markerNode.innerHTML = '&nbsp;';\n            markerNode.classList.add('CmCaReT');\n            const currentNode = editor.selection.getStart();\n            currentNode.append(markerNode);\n            // eslint-disable-next-line camelcase\n            html = editor.getContent({source_view: true});\n            html = html.replace(/<span\\s+class=\"CmCaReT\"([^>]*)>([^<]*)<\\/span>/gm, String.fromCharCode(0));\n            markerNode.remove();\n\n            if (getPref(\"prettify\")) {\n                html = codeEditorInstance?.prettifyCode(html);\n            }\n        }\n        codeEditorInstance?.setValue(html);\n    }\n\n    modal.show();\n    setTimeout(() => codeEditorInstance?.focus(), 500);\n};\n\n/**\n * Loads cm6 on demand (The first load will be delayed a little bit)\n * @returns {Promise<CodeProEditor>}\n */\nexport const requireCm6Pro = () => {\n    return new Promise((resolve) => {\n        require(['tiny_codepro/cm6pro-lazy'], (CodeProEditor) => {\n            resolve(CodeProEditor);\n        });\n    });\n};\n\n/**\n * Returns the modal instance\n * @param {TinyMCE} editor\n * @returns {Promise<Modal>}\n */\nconst createDialogue = async(editor) => {\n    const data = {\n        elementid: Math.random().toString(32).substring(2)\n    };\n\n    // Show modal with buttons.\n    const modal = await createModal({\n        templateContext: data\n    });\n\n    modal.getRoot().find(\".modal-dialog.modal-lg\").addClass(\"tiny_codepro-dlg\");\n    // Disable keyboard events (ESC key) on this modal\n    modal.getRoot().off('keydown');\n    // Prevent modal from closing on outside clicks\n    modal.getRoot().on(ModalEvents.outsideClick, (evt) => {\n        evt.preventDefault();\n    });\n    modal.body.css(\"overflow-y\", \"overlay\");\n    // Override styles imposed by body.tox-fullscreen on modals\n    modal.header.css('height', '61.46px');\n    modal.header.css('padding', '1rem 1rem');\n\n    const CodeProEditor = await requireCm6Pro();\n    const targetElem = modal.body.find('.tiny_codepro-editor-area')[0];\n    codeEditorInstance = new CodeProEditor(targetElem);\n\n    modal.footer.find(\"button.btn.btn-light\").on(\"click\", (evt) => {\n        evt.preventDefault();\n        const ds = evt.currentTarget.dataset;\n        const icon = evt.currentTarget.querySelector(\"i.fa\");\n        const $dlgElem = modal.getRoot().find(dialogQuery);\n        if (ds.fs) {\n            if (ds.fs === \"false\") {\n                // Set fullscreen mode\n                ds.fs = \"true\";\n                modal.header.hide();\n                $dlgElem.removeClass(\"modal-dialog modal-lg modal-dialog-scrollable\");\n                $dlgElem.addClass(\"tiny_codepro-fullscreen\");\n            } else {\n                // Set to modal-lg\n                ds.fs = \"false\";\n                modal.header.show();\n                $dlgElem.removeClass(\"tiny_codepro-fullscreen\");\n                $dlgElem.addClass(\"modal-dialog modal-lg modal-dialog-scrollable\");\n            }\n            setPref(\"fs\", ds.fs, true);\n        } else if (ds.theme) {\n            if (ds.theme === \"light\") {\n                ds.theme = \"dark\";\n                codeEditorInstance.setTheme(\"dark\");\n                $dlgElem.addClass(\"tiny_codepro-dark\");\n            } else {\n                ds.theme = \"light\";\n                codeEditorInstance.setTheme(\"light\");\n                $dlgElem.removeClass(\"tiny_codepro-dark\");\n            }\n            toggleClasses(icon, [\"fa-sun-o\", \"fa-moon-o\"]);\n            setPref(\"theme\", ds.theme, true);\n        } else if (ds.wrap) {\n            if (ds.wrap === \"true\") {\n                ds.wrap = false;\n                codeEditorInstance?.setLineWrapping(false);\n            } else {\n                ds.wrap = true;\n                codeEditorInstance?.setLineWrapping(true);\n            }\n            setPref(\"wrap\", ds.wrap, true);\n            toggleClasses(icon, [\"fa-exchange\", \"fa-long-arrow-right\"]);\n        } else if (ds.prettify !== undefined) {\n            codeEditorInstance?.prettify();\n        } else if (ds.view !== undefined) {\n            // Toggle UI to View panel\n            blackboard.state = codeEditorInstance.getState();\n            modal.hide();\n            editor.execCommand('ToggleView', false, 'codepro');\n            setPref(\"view\", 'panel', true);\n        }\n    });\n\n    modal.getRoot().on(ModalEvents.hidden, () => {\n        codeEditorInstance?.setValue();\n    });\n\n    // Setting stored preferences\n    const currentTheme = getPref(\"theme\", \"light\");\n    const currentWrap = getPref(\"wrap\", \"false\");\n    const currentFs = getPref(\"fs\", \"false\");\n\n    if (currentTheme !== \"light\") {\n        modal.footer.find(\"button.btn.btn-light[data-theme]\").click();\n    }\n    if (currentWrap === \"true\") {\n        modal.footer.find(\"button.btn.btn-light[data-wrap]\").click();\n    }\n    if (currentFs === \"true\") {\n        modal.footer.find(\"button.btn.btn-light[data-fs]\").click();\n    }\n    return modal;\n};"],"names":["modal","codeEditorInstance","toggleClasses","el","classList","cl","forEach","className","toggle","isLoading","async","editor","initialHTML","createDialogue","footer","find","off","on","evt","target","contains","updatedCode","_codeEditorInstance","getValue","source_view","setContent","hide","setValue","blackboard","state","setState","html","markerNode","document","createElement","innerHTML","add","selection","getStart","append","getContent","replace","String","fromCharCode","remove","_codeEditorInstance4","prettifyCode","show","setTimeout","_codeEditorInstance6","focus","requireCm6Pro","Promise","resolve","require","CodeProEditor","data","elementid","Math","random","toString","substring","templateContext","getRoot","addClass","ModalEvents","outsideClick","preventDefault","body","css","header","targetElem","ds","currentTarget","dataset","icon","querySelector","$dlgElem","fs","removeClass","theme","setTheme","wrap","setLineWrapping","undefined","prettify","view","getState","execCommand","hidden","currentTheme","currentWrap","currentFs","click"],"mappings":"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"}