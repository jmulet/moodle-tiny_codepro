{"version":3,"file":"ui.min.js","sources":["../src/ui.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport {createModal} from \"./modal\";\nimport ModalEvents from 'core/modal_events';\nimport {getPref, setPref} from \"./preferences\";\n\n/**\n * Tiny CodePro plugin.\n *\n * @module      tiny_codepro/plugin\n * @copyright   2023 Josep Mulet Pol <pep.mulet@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nconst dialogQuery = '[role=\"document\"], [data-region=\"modal\"]';\nlet modal = null;\nlet codeEditorInstance = null;\n\n/**\n * Utility to toggle a class in an HTML element\n * @param {HTMLElement} el - The Element\n * @param {string[]} classList\n */\nconst toggleClasses = function(el, classList) {\n    const cl = el.classList;\n    classList.forEach(className => {\n        cl.toggle(className);\n    });\n};\n\nlet isLoading = false;\n/**\n * Handle action\n * @param {TinyMCE} editor\n */\nexport const handleAction = async(editor) => {\n    if (isLoading) {\n        return;\n    }\n    if (modal === null) {\n        isLoading = true;\n        modal = await createDialogue();\n        isLoading = false;\n    }\n\n    // Issue, editor var does not get updated\n    // Bind save action to the correct editor\n    const $btn = modal.footer.find(\"button.btn[data-action]\");\n    $btn.off(\"click.codepro\").on(\"click.codepro\", (evt) => {\n        if (evt.target.classList.contains(\"btn-primary\")) {\n            // eslint-disable-next-line camelcase\n            const updatedCode = codeEditorInstance?.getValue({source_view: true});\n            editor.setContent(updatedCode ?? '');\n        }\n        modal.hide();\n        // Delete content\n        codeEditorInstance?.setValue();\n    });\n\n    // Insert caret marker and retrieve html code to pass to CodeMirror\n    const markerNode = document.createElement(\"SPAN\");\n    markerNode.innerHTML = '&nbsp;';\n    markerNode.classList.add('CmCaReT');\n    const currentNode = editor.selection.getStart();\n    currentNode.append(markerNode);\n    // eslint-disable-next-line camelcase\n    let html = editor.getContent({source_view: true});\n    html = html.replace(/<span\\s+class=\"CmCaReT\"([^>]*)>([^<]*)<\\/span>/gm, String.fromCharCode(0));\n    markerNode.remove();\n\n    if (getPref(\"prettify\")) {\n        html = codeEditorInstance?.prettifyCode(html);\n    }\n    codeEditorInstance?.setValue(html);\n\n    modal.show();\n    setTimeout(() => codeEditorInstance?.focus(), 500);\n};\n\n/**\n * Loads cm6 on demand (The first load will be delayed a little bit)\n * @returns {Promise<CodeProEditor>}\n */\nconst requireCm6Pro = () => {\n    return new Promise((resolve) => {\n        require(['tiny_codepro/cm6pro-lazy'], (CodeProEditor) => {\n            resolve(CodeProEditor);\n        });\n    });\n};\n\n/**\n * Returns the modal instance\n * @returns {Promise<Modal>}\n */\nconst createDialogue = async() => {\n    const data = {\n        elementid: Math.random().toString(32).substring(2)\n    };\n\n    // Show modal with buttons.\n    const modal = await createModal({\n        templateContext: data\n    });\n\n    modal.getRoot().find(\".modal-dialog.modal-lg\").addClass(\"tiny_codepro-dlg\");\n    // Disable keyboard events (ESC key) on this modal\n    modal.getRoot().off('keydown');\n    // Prevent modal from closing on outside clicks\n    modal.getRoot().on(ModalEvents.outsideClick, (evt) => {\n        evt.preventDefault();\n    });\n    modal.body.css(\"overflow-y\", \"overlay\");\n    // Override styles imposed by body.tox-fullscreen on modals\n    modal.header.css('height', '61.46px');\n    modal.header.css('padding', '1rem 1rem');\n\n    const CodeProEditor = await requireCm6Pro();\n    const targetElem = modal.body.find('.tiny_codepro-editor-area')[0];\n    codeEditorInstance = new CodeProEditor(targetElem);\n\n    modal.footer.find(\"button.btn.btn-light\").on(\"click\", (evt) => {\n        evt.preventDefault();\n        const ds = evt.currentTarget.dataset;\n        const icon = evt.currentTarget.querySelector(\"i.fa\");\n        const $dlgElem = modal.getRoot().find(dialogQuery);\n        if (ds.fs) {\n            if (ds.fs === \"false\") {\n                // Set fullscreen mode\n                ds.fs = \"true\";\n                modal.header.hide();\n                $dlgElem.removeClass(\"modal-dialog modal-lg modal-dialog-scrollable\");\n                $dlgElem.addClass(\"tiny_codepro-fullscreen\");\n            } else {\n                // Set to modal-lg\n                ds.fs = \"false\";\n                modal.header.show();\n                $dlgElem.removeClass(\"tiny_codepro-fullscreen\");\n                $dlgElem.addClass(\"modal-dialog modal-lg modal-dialog-scrollable\");\n            }\n            setPref(\"fs\", ds.fs, true);\n        } else if (ds.theme) {\n            if (ds.theme === \"light\") {\n                ds.theme = \"dark\";\n                codeEditorInstance.setTheme(\"dark\");\n                $dlgElem.addClass(\"tiny_codepro-dark\");\n            } else {\n                ds.theme = \"light\";\n                codeEditorInstance.setTheme(\"light\");\n                $dlgElem.removeClass(\"tiny_codepro-dark\");\n            }\n            toggleClasses(icon, [\"fa-sun-o\", \"fa-moon-o\"]);\n            setPref(\"theme\", ds.theme, true);\n        } else if (ds.wrap) {\n            if (ds.wrap === \"true\") {\n                ds.wrap = false;\n                codeEditorInstance?.setLineWrapping(false);\n            } else {\n                ds.wrap = true;\n                codeEditorInstance?.setLineWrapping(true);\n            }\n            setPref(\"wrap\", ds.wrap, true);\n            toggleClasses(icon, [\"fa-exchange\", \"fa-long-arrow-right\"]);\n        } else if (ds.prettify !== undefined) {\n            codeEditorInstance?.prettify();\n        } else if (ds.autoPrettify !== undefined) {\n            setPref(\"prettify\", !getPref(\"prettify\", false), true);\n            const icon = evt.currentTarget.querySelector(\"i\");\n            toggleClasses(icon, [\"fa-times\", \"fa-check\"]);\n        }\n    });\n\n    modal.getRoot().on(ModalEvents.hidden, () => {\n        codeEditorInstance?.setValue();\n    });\n\n    // Setting stored preferences\n    const currentTheme = getPref(\"theme\", \"light\");\n    const currentWrap = getPref(\"wrap\", \"false\");\n    const currentFs = getPref(\"fs\", \"false\");\n    const currentPrettify = getPref(\"prettify\", false);\n\n    if (currentTheme !== \"light\") {\n        modal.footer.find(\"button.btn.btn-light[data-theme]\").click();\n    }\n    if (currentWrap === \"true\") {\n        modal.footer.find(\"button.btn.btn-light[data-wrap]\").click();\n    }\n    if (currentFs === \"true\") {\n        modal.footer.find(\"button.btn.btn-light[data-fs]\").click();\n    }\n    if (currentPrettify) {\n        modal.footer.find(\"button.btn.btn-light[data-auto-prettify] > i\")\n            .removeClass(\"fa-times\")\n            .addClass(\"fa-check\");\n    }\n    return modal;\n};"],"names":["modal","codeEditorInstance","toggleClasses","el","classList","cl","forEach","className","toggle","isLoading","async","createDialogue","footer","find","off","on","evt","target","contains","updatedCode","_codeEditorInstance","getValue","source_view","editor","setContent","hide","setValue","markerNode","document","createElement","innerHTML","add","selection","getStart","append","html","getContent","replace","String","fromCharCode","remove","_codeEditorInstance3","prettifyCode","show","setTimeout","_codeEditorInstance5","focus","data","elementid","Math","random","toString","substring","templateContext","getRoot","addClass","ModalEvents","outsideClick","preventDefault","body","css","header","CodeProEditor","Promise","resolve","require","targetElem","ds","currentTarget","dataset","icon","querySelector","$dlgElem","fs","removeClass","theme","setTheme","wrap","setLineWrapping","undefined","prettify","autoPrettify","hidden","currentTheme","currentWrap","currentFs","currentPrettify","click"],"mappings":"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"}