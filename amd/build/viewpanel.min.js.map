{"version":3,"file":"viewpanel.min.js","sources":["../src/viewpanel.js"],"sourcesContent":["/* eslint-disable max-len */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny CodePro plugin.\n *\n * @module      tiny_codepro/plugin\n * @copyright   2023-2025 Josep Mulet Pol <pep.mulet@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport {getPref, setPref} from \"./preferences\";\nimport {getDefaultUI, isFullscreen} from \"./options\";\nimport {ViewManager} from \"./viewmanager\";\n\n/**\n * Keep track of all active viewPanels in the page.\n * @type {Record<string, ViewManager>}\n **/\nconst HARDCODED_HEIGHT = '350px';\nconst activeViewPanels = new Map();\nlet submitListenerAction = null;\n\nexport class ViewPanelManager extends ViewManager {\n    constructor(editor, opts) {\n        super(editor, opts);\n        this.translations = this.opts.translations ?? [];\n        this.isViewCreated = false;\n    }\n\n    _tShow() {\n        this.editor.execCommand('ToggleView', false, 'codepro');\n    }\n    _tClose() {\n        this.editor.execCommand('ToggleView', false, 'codepro');\n    }\n\n    async _tCreate() {\n        // Only one instance per editor has to be registered.\n        if (this.isViewCreated) {\n            return;\n        }\n        this.isViewCreated = true;\n        this.#registerIcons();\n        const viewSpec = this.#createViewSpec();\n        this.editor.ui.registry.addView(\"codepro\", viewSpec);\n    }\n\n    #createUI(api) {\n        const container = api.getContainer();\n        container.classList.add('tiny_codepro-view__pane');\n        const shadowRoot = container.attachShadow({mode: \"open\"});\n        const shadowStyles = document.createElement('style');\n        shadowStyles.textContent = `\n        .cm-editor.cm-focused {\n            border-color: #86b7fe;\n            outline: 0!important;\n            box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);\n            border-radius: 4px;\n        }\n        .cm-editor {\n            height: 100%;\n            width: 100%;\n        }\n        .cm-scroller {\n            overscroll-behavior: contain;\n        }\n        .tiny_codepro-loader {\n            position: absolute;\n            z-index: 100;\n            top: 50%;\n            left: 50%;\n            width: 16px;\n            height: 16px;\n            border-radius: 50%;\n            background-color: #999;\n            box-shadow: 32px 0 #999, -32px 0 #999;\n            animation: tiny_codepro-flash 0.5s ease-out infinite alternate;\n        }\n        @keyframes tiny_codepro-flash {\n            0% {\n            background-color: #FFF2;\n            box-shadow: 32px 0 #FFF2, -32px 0 #999;\n            }\n            50% {\n            background-color: #999;\n            box-shadow: 32px 0 #FFF2, -32px 0 #FFF2;\n            }\n            100% {\n            background-color: #FFF2;\n            box-shadow: 32px 0 #999, -32px 0 #FFF2;\n            }\n        }`;\n        shadowRoot.appendChild(shadowStyles);\n        this.codeEditorElement = shadowRoot;\n    }\n\n    #setButtonsState() {\n        // eslint-disable-next-line no-unused-vars\n        const {btnDescreaseFontsize, btnIncreaseFontsize, btnTheme, btnAccept} = this.domElements;\n\n        // Style issue\n        btnDescreaseFontsize.style.marginRight = '0';\n        btnIncreaseFontsize.style.marginLeft = '0';\n\n        // Set the toggle state\n        const isDark = getPref('theme', 'light') === 'dark';\n        ViewManager.safeInnerHTML(btnTheme, 'span', isDark ? ViewManager.icons.moon : ViewManager.icons.sun);\n\n        if (isDark) {\n            this.parentContainer.classList.add('tiny_codepro-dark');\n        } else {\n            this.parentContainer.classList.remove('tiny_codepro-dark');\n        }\n\n        // Style issue\n        const btnAcceptSvg = btnAccept?.querySelector('svg');\n        if (btnAcceptSvg) {\n            btnAcceptSvg.style.marginRight = '5px';\n        }\n\n        // Sync fullscreen state\n        const isFS = getPref('fs', false);\n        if (isFS) {\n            this.domElements.btnWrap.style.display = 'initial';\n            if (this.parentContainer) {\n                this.parentContainer.style.height = '';\n            }\n        } else {\n            // Unable linewrapping if not in fullscreen\n            this.domElements.btnWrap.style.display = 'none';\n            // Set a hardcoded height\n            if (this.parentContainer) {\n                this.parentContainer.style.height = HARDCODED_HEIGHT;\n            }\n        }\n        const hasClassFS = this.editor.container.classList.contains('tox-fullscreen');\n        if ((hasClassFS && !isFS) || (!hasClassFS && isFS)) {\n            this.editor.execCommand('mceFullScreen');\n        }\n    }\n\n    #createViewSpec() {\n        const buttonsSpec = this.#createButtons();\n        const viewSpec = {\n            buttons: buttonsSpec,\n            onShow: async(api) => {\n                if (!this.codeEditorElement) {\n                    // Make sure the UI is created.\n                    this.#createUI(api);\n                    // Register this panel as active.\n                    activeViewPanels.set(this.editor.id, this);\n                    // Register a global listener to submit event.\n                    // Autosave all editors before submitting the form.\n                    const form = this.editor.container?.closest('form');\n                    if (form && !submitListenerAction) {\n                        submitListenerAction = (evt) => {\n                            const pendingViewPanels = Array.from(activeViewPanels.values())\n                                .filter(vp => vp.pendingChanges);\n                            if (pendingViewPanels.length) {\n                                evt.preventDefault();\n                                pendingViewPanels.forEach(viewPanel => viewPanel._saveAction());\n                                setTimeout(() => {\n                                    if (form.requestSubmit) {\n                                        form.requestSubmit(evt.submitter);\n                                    } else {\n                                        evt.submitter?.click();\n                                    }\n                                }, 0);\n                            }\n                        };\n                        form.addEventListener('submit', submitListenerAction);\n                    }\n                }\n\n                // Store references to the header buttons to have access from the button actions.\n                const container = api.getContainer();\n                this.parentContainer = container.parentElement;\n\n                const headerButtonElements = this.parentContainer?.querySelectorAll('.tox-view__header button') ?? [];\n                // Convert NodeList to an array for easier reverse access\n                const buttonsArray = Array.from(headerButtonElements);\n                const bLen = buttonsArray.length;\n\n                this.domElements = {\n                    root: this.parentContainer,\n                    btnDescreaseFontsize: buttonsArray[bLen - 6],\n                    btnIncreaseFontsize: buttonsArray[bLen - 5],\n                    btnTheme: buttonsArray[bLen - 4],\n                    btnWrap: buttonsArray[bLen - 3],\n                    btnAccept: buttonsArray[bLen - 1],\n                };\n\n                // Hack to turn regular buttons into toggle ones.\n                this.#setButtonsState();\n                this._showSpinner(this.codeEditorElement);\n                // Add the codeEditor (CodeMirror) in the selected UI element.\n                await this.attachCodeEditor(this.codeEditorElement);\n                this._hideSpinner(this.codeEditorElement);\n            },\n            onHide: () => {\n                // Remove hardcoded height\n                if (this.parentContainer) {\n                    this.parentContainer.style.height = '';\n                }\n            }\n        };\n        return viewSpec;\n    }\n\n    #registerIcons() {\n        Object.keys(ViewManager.icons).forEach(key => {\n            this.editor.ui.registry.addIcon(`tiny_codepro-${key}`, ViewManager.icons[key]);\n        });\n    }\n\n    #createButtons() {\n        // eslint-disable-next-line no-unused-vars\n        const [opendialogStr, fullscreenStr, themesStr, linewrapStr, prettifyStr, decreaseFontsizeStr, increaseFontsizeStr] = this.translations;\n\n        const buttons = [\n            {\n                type: 'button',\n                text: ' ',\n                icon: 'tiny_codepro-fullscreen',\n                tooltip: fullscreenStr,\n                onAction: () => {\n                    const isFS = !isFullscreen(this.editor);\n                    if (isFS) {\n                        this.domElements.btnWrap.style.display = 'initial';\n                        if (this.parentContainer) {\n                            this.parentContainer.style.height = '';\n                        }\n                    } else {\n                        // Unable linewrapping if not in fullscreen.\n                        this.domElements.btnWrap.style.display = 'none';\n                        // Set a hardcoded height.\n                        if (this.parentContainer) {\n                            this.parentContainer.style.height = HARDCODED_HEIGHT;\n                        }\n                        // Always show with linewrapping on\n                        if (!this.codeEditor._config.lineWrapping) {\n                            this.toggleLineWrapping();\n                        }\n                    }\n                    setPref('fs', isFS);\n                    this.editor.execCommand('mceFullScreen');\n                }\n            },\n            {\n                type: 'button',\n                text: '',\n                icon: 'tiny_codepro-decreasefontsize',\n                tooltip: decreaseFontsizeStr,\n                onAction: this.decreaseFontsize.bind(this)\n            },\n            {\n                type: 'button',\n                text: '',\n                icon: 'tiny_codepro-increasefontsize',\n                tooltip: increaseFontsizeStr,\n                onAction: this.increaseFontsize.bind(this)\n            },\n            {\n                type: 'button',\n                text: ' ',\n                icon: 'tiny_codepro-sun',\n                tooltip: themesStr,\n                onAction: this.toggleTheme.bind(this)\n            },\n            // Linewrapping causes problems in panel view\n            {\n                type: 'button',\n                text: ' ',\n                icon: 'tiny_codepro-exchange',\n                tooltip: linewrapStr,\n                onAction: this.toggleLineWrapping.bind(this)\n            },\n            {\n                type: 'button',\n                text: ' ',\n                icon: 'tiny_codepro-magic',\n                tooltip: prettifyStr,\n                onAction: this.prettify.bind(this)\n            },\n            {\n                type: 'button',\n                text: ' tinyMCE',\n                icon: 'tiny_codepro-tinymce',\n                buttonType: 'primary',\n                onAction: this.accept.bind(this)\n            },\n        ];\n\n        // If user is allowed to switch views, add the button\n        const defaultUI = getDefaultUI(this.editor) ?? 'dialog';\n        const canuserswitchui = defaultUI.startsWith('user:');\n        if (canuserswitchui) {\n            buttons.unshift({\n                type: 'button',\n                text: ' ',\n                icon: 'tiny_codepro-eye',\n                tooltip: opendialogStr,\n                onAction: this.switchViews.bind(this)\n            });\n        }\n        return buttons;\n    }\n}\n"],"names":["activeViewPanels","Map","submitListenerAction","ViewPanelManager","ViewManager","constructor","editor","opts","translations","this","isViewCreated","_tShow","execCommand","_tClose","registerIcons","viewSpec","createViewSpec","ui","registry","addView","api","container","getContainer","classList","add","shadowRoot","attachShadow","mode","shadowStyles","document","createElement","textContent","appendChild","codeEditorElement","btnDescreaseFontsize","btnIncreaseFontsize","btnTheme","btnAccept","domElements","style","marginRight","marginLeft","isDark","safeInnerHTML","icons","moon","sun","parentContainer","remove","btnAcceptSvg","querySelector","isFS","btnWrap","display","height","hasClassFS","contains","buttons","createButtons","onShow","async","createUI","set","id","form","_this$editor$containe","closest","evt","pendingViewPanels","Array","from","values","filter","vp","pendingChanges","length","preventDefault","forEach","viewPanel","_saveAction","setTimeout","requestSubmit","submitter","click","addEventListener","parentElement","headerButtonElements","querySelectorAll","buttonsArray","bLen","root","setButtonsState","_showSpinner","attachCodeEditor","_hideSpinner","onHide","Object","keys","key","addIcon","opendialogStr","fullscreenStr","themesStr","linewrapStr","prettifyStr","decreaseFontsizeStr","increaseFontsizeStr","type","text","icon","tooltip","onAction","codeEditor","_config","lineWrapping","toggleLineWrapping","decreaseFontsize","bind","increaseFontsize","toggleTheme","prettify","buttonType","accept","startsWith","unshift","switchViews"],"mappings":";;;;;;;;MAgCMA,iBAAmB,IAAIC,QACzBC,qBAAuB,WAEdC,yBAAyBC,yBAClCC,YAAYC,OAAQC,YACVD,OAAQC,WACTC,aAAeC,KAAKF,KAAKC,cAAgB,QACzCE,eAAgB,EAGzBC,cACSL,OAAOM,YAAY,cAAc,EAAO,WAEjDC,eACSP,OAAOM,YAAY,cAAc,EAAO,+BAKzCH,KAAKC,0BAGJA,eAAgB,QAChBI,sBACCC,SAAWN,MAAKO,sBACjBV,OAAOW,GAAGC,SAASC,QAAQ,UAAWJ,oBAGrCK,WACAC,UAAYD,IAAIE,eACtBD,UAAUE,UAAUC,IAAI,iCAClBC,WAAaJ,UAAUK,aAAa,CAACC,KAAM,SAC3CC,aAAeC,SAASC,cAAc,SAC5CF,aAAaG,YAAe,yrCAwC5BN,WAAWO,YAAYJ,mBAClBK,kBAAoBR,oCAKnBS,qBAACA,qBAADC,oBAAuBA,oBAAvBC,SAA4CA,SAA5CC,UAAsDA,WAAa5B,KAAK6B,YAG9EJ,qBAAqBK,MAAMC,YAAc,IACzCL,oBAAoBI,MAAME,WAAa,UAGjCC,OAAuC,UAA9B,wBAAQ,QAAS,kCACpBC,cAAcP,SAAU,OAAQM,OAAStC,yBAAYwC,MAAMC,KAAOzC,yBAAYwC,MAAME,KAE5FJ,YACKK,gBAAgBxB,UAAUC,IAAI,0BAE9BuB,gBAAgBxB,UAAUyB,OAAO,2BAIpCC,aAAeZ,MAAAA,iBAAAA,UAAWa,cAAc,OAC1CD,eACAA,aAAaV,MAAMC,YAAc,aAI/BW,MAAO,wBAAQ,MAAM,GACvBA,WACKb,YAAYc,QAAQb,MAAMc,QAAU,UACrC5C,KAAKsC,uBACAA,gBAAgBR,MAAMe,OAAS,WAInChB,YAAYc,QAAQb,MAAMc,QAAU,OAErC5C,KAAKsC,uBACAA,gBAAgBR,MAAMe,OAlHlB,gBAqHXC,WAAa9C,KAAKH,OAAOe,UAAUE,UAAUiC,SAAS,mBACvDD,aAAeJ,OAAWI,YAAcJ,YACpC7C,OAAOM,YAAY,yCAMX,CACb6C,QAFgBhD,MAAKiD,gBAGrBC,OAAQC,MAAAA,oCACCnD,KAAKwB,kBAAmB,iCAEpB4B,SAAUzC,KAEfpB,iBAAiB8D,IAAIrD,KAAKH,OAAOyD,GAAItD,YAG/BuD,mCAAOvD,KAAKH,OAAOe,kDAAZ4C,sBAAuBC,QAAQ,QACxCF,OAAS9D,uBACTA,qBAAwBiE,YACdC,kBAAoBC,MAAMC,KAAKtE,iBAAiBuE,UACjDC,QAAOC,IAAMA,GAAGC,iBACjBN,kBAAkBO,SAClBR,IAAIS,iBACJR,kBAAkBS,SAAQC,WAAaA,UAAUC,gBACjDC,YAAW,wBACHhB,KAAKiB,cACLjB,KAAKiB,cAAcd,IAAIe,kCAEvBf,IAAIe,oDAAWC,UAEpB,KAGXnB,KAAKoB,iBAAiB,SAAUlF,6BAKlCmB,UAAYD,IAAIE,oBACjByB,gBAAkB1B,UAAUgE,oBAE3BC,yDAA4BvC,8EAAiBwC,iBAAiB,8BAA+B,GAE7FC,aAAenB,MAAMC,KAAKgB,sBAC1BG,KAAOD,aAAab,YAErBrC,YAAc,CACfoD,KAAMjF,KAAKsC,gBACXb,qBAAsBsD,aAAaC,KAAO,GAC1CtD,oBAAqBqD,aAAaC,KAAO,GACzCrD,SAAUoD,aAAaC,KAAO,GAC9BrC,QAASoC,aAAaC,KAAO,GAC7BpD,UAAWmD,aAAaC,KAAO,UAI9BE,uBACAC,aAAanF,KAAKwB,yBAEjBxB,KAAKoF,iBAAiBpF,KAAKwB,wBAC5B6D,aAAarF,KAAKwB,oBAE3B8D,OAAQ,KAEAtF,KAAKsC,uBACAA,gBAAgBR,MAAMe,OAAS,uBAQhD0C,OAAOC,KAAK7F,yBAAYwC,OAAOiC,SAAQqB,WAC9B5F,OAAOW,GAAGC,SAASiF,QAAS,gBAAeD,MAAO9F,yBAAYwC,MAAMsD,gCAMtEE,cAAeC,cAAeC,UAAWC,YAAaC,YAAaC,oBAAqBC,qBAAuBjG,KAAKD,aAErHiD,QAAU,CACZ,CACIkD,KAAM,SACNC,KAAM,IACNC,KAAM,0BACNC,QAAST,cACTU,SAAU,WACA5D,OAAQ,yBAAa1C,KAAKH,QAC5B6C,WACKb,YAAYc,QAAQb,MAAMc,QAAU,UACrC5C,KAAKsC,uBACAA,gBAAgBR,MAAMe,OAAS,WAInChB,YAAYc,QAAQb,MAAMc,QAAU,OAErC5C,KAAKsC,uBACAA,gBAAgBR,MAAMe,OA3N9B,SA8NI7C,KAAKuG,WAAWC,QAAQC,mBACpBC,+CAGL,KAAMhE,WACT7C,OAAOM,YAAY,mBAGhC,CACI+F,KAAM,SACNC,KAAM,GACNC,KAAM,gCACNC,QAASL,oBACTM,SAAUtG,KAAK2G,iBAAiBC,KAAK5G,OAEzC,CACIkG,KAAM,SACNC,KAAM,GACNC,KAAM,gCACNC,QAASJ,oBACTK,SAAUtG,KAAK6G,iBAAiBD,KAAK5G,OAEzC,CACIkG,KAAM,SACNC,KAAM,IACNC,KAAM,mBACNC,QAASR,UACTS,SAAUtG,KAAK8G,YAAYF,KAAK5G,OAGpC,CACIkG,KAAM,SACNC,KAAM,IACNC,KAAM,wBACNC,QAASP,YACTQ,SAAUtG,KAAK0G,mBAAmBE,KAAK5G,OAE3C,CACIkG,KAAM,SACNC,KAAM,IACNC,KAAM,qBACNC,QAASN,YACTO,SAAUtG,KAAK+G,SAASH,KAAK5G,OAEjC,CACIkG,KAAM,SACNC,KAAM,WACNC,KAAM,uBACNY,WAAY,UACZV,SAAUtG,KAAKiH,OAAOL,KAAK5G,gBAKjB,yBAAaA,KAAKH,SAAW,UACbqH,WAAW,UAEzClE,QAAQmE,QAAQ,CACZjB,KAAM,SACNC,KAAM,IACNC,KAAM,mBACNC,QAASV,cACTW,SAAUtG,KAAKoH,YAAYR,KAAK5G,QAGjCgD"}