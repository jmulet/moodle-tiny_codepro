{"version":3,"file":"viewpanel.min.js","sources":["../src/viewpanel.js"],"sourcesContent":["/* eslint-disable max-len */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny CodePro plugin.\n *\n * @module      tiny_codepro/plugin\n * @copyright   2023-2025 Josep Mulet Pol <pep.mulet@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport {getPref, setPref} from \"./preferences\";\nimport {getDefaultUI, isFullscreen} from \"./options\";\nimport {ViewManager} from \"./viewmanager\";\n\n/**\n * Keep track of all active viewPanels in the page.\n * @type {Record<string, ViewManager>}\n **/\nconst activeViewPanels = new Map();\nlet submitListenerAction = null;\n\nexport class ViewPanelManager extends ViewManager {\n    constructor(editor, opts) {\n        super(editor, opts);\n        this.translations = this.opts.translations ?? [];\n        this.isViewCreated = false;\n    }\n\n    _tShow() {\n        this.editor.execCommand('ToggleView', false, 'codepro');\n    }\n    _tClose() {\n        this.editor.execCommand('ToggleView', false, 'codepro');\n    }\n\n    async _tCreate() {\n        // Only one instance per editor has to be registered.\n        if (this.isViewCreated) {\n            return;\n        }\n        this.isViewCreated = true;\n        this.#registerIcons();\n        const viewSpec = this.#createViewSpec();\n        this.editor.ui.registry.addView(\"codepro\", viewSpec);\n    }\n\n    #createUI(api) {\n        this.codeEditorElement = document.createElement(\"DIV\");\n        const container = api.getContainer();\n        container.classList.add('tiny_codepro-view__pane');\n        const shadowRoot = container.attachShadow({mode: \"open\"});\n        this.codeEditorElement.classList.add('tiny_codepro-container');\n        const shadowStyles = document.createElement('style');\n        shadowStyles.textContent = `\n        .tiny_codepro-container {\n            height: 100%;\n        }\n        .cm-editor.cm-focused {\n            border-color: #86b7fe;\n            outline: 0!important;\n            box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);\n            border-radius: 4px;\n        }\n        .cm-editor {\n            height: 100%;\n        }\n        .tiny_codepro-loader {\n            position: absolute;\n            z-index: 100;\n            top: 50%;\n            left: 50%;\n            width: 16px;\n            height: 16px;\n            border-radius: 50%;\n            background-color: #999;\n            box-shadow: 32px 0 #999, -32px 0 #999;\n            animation: tiny_codepro-flash 0.5s ease-out infinite alternate;\n        }\n        @keyframes tiny_codepro-flash {\n            0% {\n            background-color: #FFF2;\n            box-shadow: 32px 0 #FFF2, -32px 0 #999;\n            }\n            50% {\n            background-color: #999;\n            box-shadow: 32px 0 #FFF2, -32px 0 #FFF2;\n            }\n            100% {\n            background-color: #FFF2;\n            box-shadow: 32px 0 #999, -32px 0 #FFF2;\n            }\n        }`;\n        shadowRoot.appendChild(shadowStyles);\n        shadowRoot.appendChild(this.codeEditorElement);\n    }\n\n    #setButtonsState() {\n        const {btnDescreaseFontsize, btnIncreaseFontsize, btnTheme, btnAccept} = this.domElements;\n\n        // Style issue\n        btnDescreaseFontsize.style.marginRight = '0';\n        btnIncreaseFontsize.style.marginLeft = '0';\n\n        // Set the toggle state\n        const isDark = getPref('theme', 'light') === 'dark';\n        btnTheme.querySelector('span').innerHTML = isDark ? ViewManager.icons.moon : ViewManager.icons.sun;\n        if (isDark) {\n            this.parentContainer.classList.add('tiny_codepro-dark');\n        } else {\n            this.parentContainer.classList.remove('tiny_codepro-dark');\n        }\n\n        // Style issue\n        btnAccept.querySelector('svg').style.marginRight = '5px';\n\n        // Sync fullscreen state\n        const isFullscreen = getPref('fs', false);\n        const hasClassFS = this.editor.container.classList.contains('tox-fullscreen');\n        if ((hasClassFS && !isFullscreen) || (!hasClassFS && isFullscreen)) {\n            this.editor.execCommand('mceFullScreen');\n        }\n    }\n\n    #createViewSpec() {\n        const buttonsSpec = this.#createButtons();\n        const viewSpec = {\n            buttons: buttonsSpec,\n            onShow: async(api) => {\n                if (!this.codeEditorElement) {\n                    // Make sure the UI is created.\n                    this.#createUI(api);\n                    // Register this panel as active.\n                    activeViewPanels.set(this.editor.id, this);\n                    // Register a global listener to submit event.\n                    // Autosave all editors before submitting the form.\n                    const form = this.editor.container?.closest('form');\n                    if (form && !submitListenerAction) {\n                        submitListenerAction = (evt) => {\n                            const pendingViewPanels = Array.from(activeViewPanels.values())\n                                .filter(vp => vp.pendingChanges);\n                            if (pendingViewPanels.length) {\n                                evt.preventDefault();\n                                pendingViewPanels.forEach(viewPanel => viewPanel._saveAction());\n                                setTimeout(() => {\n                                    if (form.requestSubmit) {\n                                        form.requestSubmit(evt.submitter);\n                                    } else {\n                                        evt.submitter?.click();\n                                    }\n                                }, 0);\n                            }\n                        };\n                        form.addEventListener('submit', submitListenerAction);\n                    }\n                }\n\n                // Store references to the header buttons to have access from the button actions.\n                const container = api.getContainer();\n                this.parentContainer = container.parentElement;\n                const headerButtonElements = this.parentContainer.querySelectorAll('.tox-view__header button');\n                // eslint-disable-next-line no-unused-vars\n                const [_, __, btnDescreaseFontsize, btnIncreaseFontsize, btnTheme, ___, btnAccept] = headerButtonElements;\n                this.domElements = {\n                    root: this.parentContainer,\n                    btnDescreaseFontsize,\n                    btnIncreaseFontsize,\n                    btnTheme,\n                    btnAccept\n                };\n\n                // Hack to turn regular buttons into toggle ones.\n                this.#setButtonsState();\n                this._showSpinner(container.shadowRoot);\n                // Add the codeEditor (CodeMirror) in the selected UI element.\n                await this.attachCodeEditor(this.codeEditorElement);\n                this._hideSpinner(container.shadowRoot);\n            },\n            onHide: () => {}\n        };\n        return viewSpec;\n    }\n\n    #registerIcons() {\n        Object.keys(ViewManager.icons).forEach(key => {\n            this.editor.ui.registry.addIcon(`tiny_codepro-${key}`, ViewManager.icons[key]);\n        });\n    }\n\n    #createButtons() {\n        // eslint-disable-next-line no-unused-vars\n        const [opendialogStr, fullscreenStr, themesStr, linewrapStr, prettifyStr, decreaseFontsizeStr, increaseFontsizeStr] = this.translations;\n\n        const buttons = [\n            {\n                type: 'button',\n                text: ' ',\n                icon: 'tiny_codepro-fullscreen',\n                tooltip: fullscreenStr,\n                onAction: () => {\n                    setPref('fs', !isFullscreen(this.editor));\n                    this.editor.execCommand('mceFullScreen');\n                }\n            },\n            {\n                type: 'button',\n                text: '',\n                icon: 'tiny_codepro-decreasefontsize',\n                tooltip: decreaseFontsizeStr,\n                onAction: this.decreaseFontsize.bind(this)\n            },\n            {\n                type: 'button',\n                text: '',\n                icon: 'tiny_codepro-increasefontsize',\n                tooltip: increaseFontsizeStr,\n                onAction: this.increaseFontsize.bind(this)\n            },\n            {\n                type: 'button',\n                text: ' ',\n                icon: 'tiny_codepro-sun',\n                tooltip: themesStr,\n                onAction: this.toggleTheme.bind(this)\n            },\n            // Linewrapping causes problems in panel view\n            {\n                type: 'button',\n                text: ' ',\n                icon: 'tiny_codepro-magic',\n                tooltip: prettifyStr,\n                onAction: this.prettify.bind(this)\n            },\n            {\n                type: 'button',\n                text: ' tinyMCE',\n                icon: 'tiny_codepro-tinymce',\n                buttonType: 'primary',\n                onAction: this.accept.bind(this)\n            },\n        ];\n\n        // If user is allowed to switch views, add the button\n        const defaultUI = getDefaultUI(this.editor) ?? 'dialog';\n        const canuserswitchui = defaultUI.startsWith('user:');\n        if (canuserswitchui) {\n            buttons.unshift({\n                type: 'button',\n                text: ' ',\n                icon: 'tiny_codepro-eye',\n                tooltip: opendialogStr,\n                onAction: this.switchViews.bind(this)\n            });\n        }\n        return buttons;\n    }\n}\n"],"names":["activeViewPanels","Map","submitListenerAction","ViewPanelManager","ViewManager","constructor","editor","opts","translations","this","isViewCreated","_tShow","execCommand","_tClose","registerIcons","viewSpec","createViewSpec","ui","registry","addView","api","codeEditorElement","document","createElement","container","getContainer","classList","add","shadowRoot","attachShadow","mode","shadowStyles","textContent","appendChild","btnDescreaseFontsize","btnIncreaseFontsize","btnTheme","btnAccept","domElements","style","marginRight","marginLeft","isDark","querySelector","innerHTML","icons","moon","sun","parentContainer","remove","isFullscreen","hasClassFS","contains","buttons","createButtons","onShow","async","createUI","set","id","form","_this$editor$containe","closest","evt","pendingViewPanels","Array","from","values","filter","vp","pendingChanges","length","preventDefault","forEach","viewPanel","_saveAction","setTimeout","requestSubmit","submitter","click","addEventListener","parentElement","headerButtonElements","querySelectorAll","_","__","___","root","setButtonsState","_showSpinner","attachCodeEditor","_hideSpinner","onHide","Object","keys","key","addIcon","opendialogStr","fullscreenStr","themesStr","linewrapStr","prettifyStr","decreaseFontsizeStr","increaseFontsizeStr","type","text","icon","tooltip","onAction","decreaseFontsize","bind","increaseFontsize","toggleTheme","prettify","buttonType","accept","startsWith","unshift","switchViews"],"mappings":"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"}