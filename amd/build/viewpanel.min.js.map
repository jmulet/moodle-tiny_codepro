{"version":3,"file":"viewpanel.min.js","sources":["../src/viewpanel.js"],"sourcesContent":["/* eslint-disable max-len */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny CodePro plugin.\n *\n * @module      tiny_codepro/plugin\n * @copyright   2023-2025 Josep Mulet Pol <pep.mulet@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport {setPref} from \"./preferences\";\nimport {getDefaultUI, isFullscreen} from \"./options\";\nimport {ViewManager} from \"./viewmanager\";\n\n\nexport class ViewPanelManager extends ViewManager {\n    constructor(editor, opts) {\n        super(editor, opts);\n        this.translations = this.opts.translations ?? [];\n        this.isViewCreated = false;\n    }\n\n    _tShow() {\n        this.editor.execCommand('ToggleView', false, 'codepro');\n    }\n    _tClose() {\n        this.editor.execCommand('ToggleView', false, 'codepro');\n    }\n\n    async _tCreate() {\n        // Only one instance per editor has to be registered.\n        if (this.isViewCreated) {\n            return;\n        }\n        this.isViewCreated = true;\n        this.#registerIcons();\n        const viewSpec = this.#createViewSpec();\n        this.editor.ui.registry.addView(\"codepro\", viewSpec);\n        return;\n    }\n\n    #createViewSpec() {\n        const buttonsSpec = this.#createButtons();\n        const viewSpec = {\n            buttons: buttonsSpec,\n            onShow: async(api) => {\n                if (!this.codeEditorElement) {\n                    this.codeEditorElement = document.createElement(\"DIV\");\n                    const container = api.getContainer();\n                    container.classList.add('tiny_codepro-view__pane');\n                    const shadowRoot = container.attachShadow({mode: \"open\"});\n                    this.codeEditorElement.classList.add('tiny_codepro-container');\n                    const shadowStyles = document.createElement('style');\n                    shadowStyles.textContent = `\n                    .tiny_codepro-container {\n                        height: 100%;\n                    }\n                    .cm-editor.cm-focused {\n                        outline: none!important;\n                    }\n                    .cm-editor {\n                        height: 100%;\n                    }`;\n                    shadowRoot.appendChild(shadowStyles);\n                    shadowRoot.appendChild(this.codeEditorElement);\n                }\n                // Add the codeEditor (CodeMirror) in the selected UI element\n                await this.attachCodeEditor(this.codeEditorElement);\n                // Obtain the code from Tiny and set it to code editor\n                this.setHTMLCodeOrState();\n            },\n            onHide: () => {}\n        };\n        return viewSpec;\n    }\n\n    #registerIcons() {\n        Object.keys(ViewManager.icons).forEach(key => {\n            this.editor.ui.registry.addIcon(`tiny_codepro-${key}`, ViewManager.icons[key]);\n        });\n    }\n\n    #createButtons() {\n        const [opendialogStr, fullscreenStr, themesStr, linewrapStr, prettifyStr, decreaseFontsizeStr, increaseFontsizeStr] = this.translations;\n\n        const buttons = [\n            {\n                type: 'button',\n                text: ' ',\n                icon: 'tiny_codepro-fullscreen',\n                tooltip: fullscreenStr,\n                onAction: () => {\n                    setPref('fs', !isFullscreen(this.editor), true);\n                    this.editor.execCommand('mceFullScreen');\n                }\n            },\n            {\n                type: 'button',\n                text: '',\n                icon: 'tiny_codepro-decreasefontsize',\n                tooltip: decreaseFontsizeStr,\n                onAction: this.decreaseFontsize.bind(this)\n            },\n            {\n                type: 'button',\n                text: '',\n                icon: 'tiny_codepro-increasefontsize',\n                tooltip: increaseFontsizeStr,\n                onAction: this.increaseFontsize.bind(this)\n            },\n            {\n                type: 'button',\n                text: ' ',\n                icon: 'tiny_codepro-sun',\n                tooltip: themesStr,\n                onAction: this.toggleTheme.bind(this)\n            },\n            {\n                type: 'button',\n                text: ' ',\n                icon: 'tiny_codepro-exchange',\n                tooltip: linewrapStr,\n                onAction: this.toggleLineWrapping.bind(this)\n            },\n            {\n                type: 'button',\n                text: ' ',\n                icon: 'tiny_codepro-magic',\n                tooltip: prettifyStr,\n                onAction: this.prettify.bind(this)\n            },\n            {\n                type: 'button',\n                text: ' tinyMCE',\n                icon: 'tiny_codepro-tinymce',\n                buttonType: 'primary',\n                onAction: this.accept.bind(this)\n            },\n        ];\n\n        // If user is allowed to switch views, add the button\n        const defaultUI = getDefaultUI(this.editor) ?? 'dialog';\n        const canUserSwitchUI = defaultUI.startsWith('user:');\n        if (canUserSwitchUI) {\n            buttons.unshift({\n                type: 'button',\n                text: ' ',\n                icon: 'tiny_codepro-eye',\n                tooltip: opendialogStr,\n                onAction: this.switchViews.bind(this)\n            });\n        }\n        return buttons;\n    }\n}\n"],"names":["ViewPanelManager","ViewManager","constructor","editor","opts","translations","this","isViewCreated","_tShow","execCommand","_tClose","registerIcons","viewSpec","createViewSpec","ui","registry","addView","buttons","createButtons","onShow","async","codeEditorElement","document","createElement","container","api","getContainer","classList","add","shadowRoot","attachShadow","mode","shadowStyles","textContent","appendChild","attachCodeEditor","setHTMLCodeOrState","onHide","Object","keys","icons","forEach","key","addIcon","opendialogStr","fullscreenStr","themesStr","linewrapStr","prettifyStr","decreaseFontsizeStr","increaseFontsizeStr","type","text","icon","tooltip","onAction","decreaseFontsize","bind","increaseFontsize","toggleTheme","toggleLineWrapping","prettify","buttonType","accept","startsWith","unshift","switchViews"],"mappings":";;;;;;;;MA4BaA,yBAAyBC,yBAClCC,YAAYC,OAAQC,YACVD,OAAQC,WACTC,aAAeC,KAAKF,KAAKC,cAAgB,QACzCE,eAAgB,EAGzBC,cACSL,OAAOM,YAAY,cAAc,EAAO,WAEjDC,eACSP,OAAOM,YAAY,cAAc,EAAO,+BAKzCH,KAAKC,0BAGJA,eAAgB,QAChBI,sBACCC,SAAWN,MAAKO,sBACjBV,OAAOW,GAAGC,SAASC,QAAQ,UAAWJ,kCAM1B,CACbK,QAFgBX,MAAKY,gBAGrBC,OAAQC,MAAAA,UACCd,KAAKe,kBAAmB,MACpBA,kBAAoBC,SAASC,cAAc,aAC1CC,UAAYC,IAAIC,eACtBF,UAAUG,UAAUC,IAAI,iCAClBC,WAAaL,UAAUM,aAAa,CAACC,KAAM,cAC5CV,kBAAkBM,UAAUC,IAAI,gCAC/BI,aAAeV,SAASC,cAAc,SAC5CS,aAAaC,YAAe,sUAU5BJ,WAAWK,YAAYF,cACvBH,WAAWK,YAAY5B,KAAKe,yBAG1Bf,KAAK6B,iBAAiB7B,KAAKe,wBAE5Be,sBAETC,OAAQ,yBAMZC,OAAOC,KAAKtC,yBAAYuC,OAAOC,SAAQC,WAC9BvC,OAAOW,GAAGC,SAAS4B,QAAS,gBAAeD,MAAOzC,yBAAYuC,MAAME,gCAKtEE,cAAeC,cAAeC,UAAWC,YAAaC,YAAaC,oBAAqBC,qBAAuB5C,KAAKD,aAErHY,QAAU,CACZ,CACIkC,KAAM,SACNC,KAAM,IACNC,KAAM,0BACNC,QAAST,cACTU,SAAU,8BACE,OAAO,yBAAajD,KAAKH,SAAS,QACrCA,OAAOM,YAAY,mBAGhC,CACI0C,KAAM,SACNC,KAAM,GACNC,KAAM,gCACNC,QAASL,oBACTM,SAAUjD,KAAKkD,iBAAiBC,KAAKnD,OAEzC,CACI6C,KAAM,SACNC,KAAM,GACNC,KAAM,gCACNC,QAASJ,oBACTK,SAAUjD,KAAKoD,iBAAiBD,KAAKnD,OAEzC,CACI6C,KAAM,SACNC,KAAM,IACNC,KAAM,mBACNC,QAASR,UACTS,SAAUjD,KAAKqD,YAAYF,KAAKnD,OAEpC,CACI6C,KAAM,SACNC,KAAM,IACNC,KAAM,wBACNC,QAASP,YACTQ,SAAUjD,KAAKsD,mBAAmBH,KAAKnD,OAE3C,CACI6C,KAAM,SACNC,KAAM,IACNC,KAAM,qBACNC,QAASN,YACTO,SAAUjD,KAAKuD,SAASJ,KAAKnD,OAEjC,CACI6C,KAAM,SACNC,KAAM,WACNC,KAAM,uBACNS,WAAY,UACZP,SAAUjD,KAAKyD,OAAON,KAAKnD,gBAKjB,yBAAaA,KAAKH,SAAW,UACb6D,WAAW,UAEzC/C,QAAQgD,QAAQ,CACZd,KAAM,SACNC,KAAM,IACNC,KAAM,mBACNC,QAASV,cACTW,SAAUjD,KAAK4D,YAAYT,KAAKnD,QAGjCW"}