{"version":3,"file":"viewpanel.min.js","sources":["../src/viewpanel.js"],"sourcesContent":["/* eslint-disable max-len */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny CodePro plugin.\n *\n * @module      tiny_codepro/plugin\n * @copyright   2023-2025 Josep Mulet Pol <pep.mulet@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport {getPref, setPref} from \"./preferences\";\nimport {getDefaultUI, isFullscreen} from \"./options\";\nimport {ViewManager} from \"./viewmanager\";\n\n\nexport class ViewPanelManager extends ViewManager {\n    constructor(editor, opts) {\n        super(editor, opts);\n        this.translations = this.opts.translations ?? [];\n        this.isViewCreated = false;\n    }\n\n    _tShow() {\n        this.editor.execCommand('ToggleView', false, 'codepro');\n    }\n    _tClose() {\n        this.editor.execCommand('ToggleView', false, 'codepro');\n    }\n\n    async _tCreate() {\n        // Only one instance per editor has to be registered.\n        if (this.isViewCreated) {\n            return;\n        }\n        this.isViewCreated = true;\n        this.#registerIcons();\n        const viewSpec = this.#createViewSpec();\n        this.editor.ui.registry.addView(\"codepro\", viewSpec);\n    }\n\n    #createUI(api) {\n        this.codeEditorElement = document.createElement(\"DIV\");\n        const container = api.getContainer();\n        container.classList.add('tiny_codepro-view__pane');\n        const shadowRoot = container.attachShadow({mode: \"open\"});\n        this.codeEditorElement.classList.add('tiny_codepro-container');\n        const shadowStyles = document.createElement('style');\n        shadowStyles.textContent = `\n        .tiny_codepro-container {\n            height: 100%;\n        }\n        .cm-editor.cm-focused {\n            outline: none!important;\n        }\n        .cm-editor {\n            height: 100%;\n        }`;\n        shadowRoot.appendChild(shadowStyles);\n        shadowRoot.appendChild(this.codeEditorElement);\n    }\n\n    #setButtonsState() {\n        // eslint-disable-next-line no-unused-vars\n        const [_, __, btnDescreaseFontsize, btnIncreaseFontsize, btnTheme, btnWrap, ___, btnAccept] = this.headerButtonElements;\n\n        // Style issue\n        btnDescreaseFontsize.style.marginRight = '0';\n        btnIncreaseFontsize.style.marginLeft = '0';\n\n        // Set the toggle state\n        const isDark = getPref('theme', 'light') === 'dark';\n        const isWrap = getPref('wrap', true);\n        btnTheme.querySelector('span').innerHTML = isDark ? ViewManager.icons.moon : ViewManager.icons.sun;\n        btnWrap.querySelector('span').innerHTML = isWrap ? ViewManager.icons.exchange : ViewManager.icons.rightarrow;\n        if (isDark) {\n            this.parentContainer.classList.add('tiny_codepro-dark');\n        } else {\n            this.parentContainer.classList.remove('tiny_codepro-dark');\n        }\n\n        // Style issue\n        btnAccept.querySelector('svg').style.marginRight = '5px';\n\n        // Sync fullscreen state\n        const isFullscreen = getPref('fs', false);\n        const hasClassFS = this.editor.container.classList.contains('tox-fullscreen');\n        if ((hasClassFS && !isFullscreen) || (!hasClassFS && isFullscreen)) {\n            this.editor.execCommand('mceFullScreen');\n        }\n    }\n\n    #createViewSpec() {\n        const buttonsSpec = this.#createButtons();\n        const viewSpec = {\n            buttons: buttonsSpec,\n            onShow: async(api) => {\n                if (!this.codeEditorElement) {\n                    // Make sure the UI is created.\n                    this.#createUI(api);\n                }\n\n                // Store references to the header buttons to have access from the button actions.\n                const container = api.getContainer();\n                this.parentContainer = container.parentElement;\n                this.headerButtonElements = this.parentContainer.querySelectorAll('.tox-view__header button');\n\n                // Hack to turn regular buttons into toggle ones.\n                this.#setButtonsState();\n                // Add the codeEditor (CodeMirror) in the selected UI element.\n                await this.attachCodeEditor(this.codeEditorElement);\n                // Obtain the code from Tiny and set it to code editor.\n                this.setHTMLCodeOrState();\n            },\n            onHide: () => {}\n        };\n        return viewSpec;\n    }\n\n    #registerIcons() {\n        Object.keys(ViewManager.icons).forEach(key => {\n            this.editor.ui.registry.addIcon(`tiny_codepro-${key}`, ViewManager.icons[key]);\n        });\n    }\n\n    #createButtons() {\n        const [opendialogStr, fullscreenStr, themesStr, linewrapStr, prettifyStr, decreaseFontsizeStr, increaseFontsizeStr] = this.translations;\n\n        const buttons = [\n            {\n                type: 'button',\n                text: ' ',\n                icon: 'tiny_codepro-fullscreen',\n                tooltip: fullscreenStr,\n                onAction: () => {\n                    setPref('fs', !isFullscreen(this.editor), true);\n                    this.editor.execCommand('mceFullScreen');\n                }\n            },\n            {\n                type: 'button',\n                text: '',\n                icon: 'tiny_codepro-decreasefontsize',\n                tooltip: decreaseFontsizeStr,\n                onAction: this.decreaseFontsize.bind(this)\n            },\n            {\n                type: 'button',\n                text: '',\n                icon: 'tiny_codepro-increasefontsize',\n                tooltip: increaseFontsizeStr,\n                onAction: this.increaseFontsize.bind(this)\n            },\n            {\n                type: 'button',\n                text: ' ',\n                icon: 'tiny_codepro-sun',\n                tooltip: themesStr,\n                onAction: () => {\n                    const btnTheme = this.headerButtonElements[4];\n                    this.toggleTheme(btnTheme, this.parentContainer);\n                }\n            },\n            {\n                type: 'button',\n                text: ' ',\n                icon: 'tiny_codepro-exchange',\n                tooltip: linewrapStr,\n                onAction: () => {\n                    const btnWrap = this.headerButtonElements[5];\n                    this.toggleLineWrapping(btnWrap);\n                }\n            },\n            {\n                type: 'button',\n                text: ' ',\n                icon: 'tiny_codepro-magic',\n                tooltip: prettifyStr,\n                onAction: this.prettify.bind(this)\n            },\n            {\n                type: 'button',\n                text: ' tinyMCE',\n                icon: 'tiny_codepro-tinymce',\n                buttonType: 'primary',\n                onAction: this.accept.bind(this)\n            },\n        ];\n\n        // If user is allowed to switch views, add the button\n        const defaultUI = getDefaultUI(this.editor) ?? 'dialog';\n        const canUserSwitchUI = defaultUI.startsWith('user:');\n        if (canUserSwitchUI) {\n            buttons.unshift({\n                type: 'button',\n                text: ' ',\n                icon: 'tiny_codepro-eye',\n                tooltip: opendialogStr,\n                onAction: this.switchViews.bind(this)\n            });\n        }\n        return buttons;\n    }\n}\n"],"names":["ViewPanelManager","ViewManager","constructor","editor","opts","translations","this","isViewCreated","_tShow","execCommand","_tClose","registerIcons","viewSpec","createViewSpec","ui","registry","addView","api","codeEditorElement","document","createElement","container","getContainer","classList","add","shadowRoot","attachShadow","mode","shadowStyles","textContent","appendChild","_","__","btnDescreaseFontsize","btnIncreaseFontsize","btnTheme","btnWrap","___","btnAccept","headerButtonElements","style","marginRight","marginLeft","isDark","isWrap","querySelector","innerHTML","icons","moon","sun","exchange","rightarrow","parentContainer","remove","isFullscreen","hasClassFS","contains","buttons","createButtons","onShow","async","createUI","parentElement","querySelectorAll","setButtonsState","attachCodeEditor","setHTMLCodeOrState","onHide","Object","keys","forEach","key","addIcon","opendialogStr","fullscreenStr","themesStr","linewrapStr","prettifyStr","decreaseFontsizeStr","increaseFontsizeStr","type","text","icon","tooltip","onAction","decreaseFontsize","bind","increaseFontsize","toggleTheme","toggleLineWrapping","prettify","buttonType","accept","startsWith","unshift","switchViews"],"mappings":"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"}