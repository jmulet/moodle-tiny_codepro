define("tiny_codepro/htmlfy-lazy",["exports"],(function(_exports){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.default=void 0;const CONFIG={ignore:[],strict:!1,tab_size:2,trim:[]},isHtml=content=>/<(?<Element>[A-Za-z]+\b)[^>]*(?:.|\n)*?<\/{1}\k<Element>>/.test(content),mergeObjects=(current,updates)=>{if(!current||!updates)throw new Error("Both 'current' and 'updates' must be passed-in to merge()");let merged;if(Array.isArray(current))merged=structuredClone(current).concat(updates);else if("object"==typeof current){merged={...current};for(let key of Object.keys(updates))"object"!=typeof updates[key]?merged[key]=updates[key]:merged[key]=mergeObjects(merged[key]||{},updates[key])}return merged},ignoreElement=function(html,ignore){let mode=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"protect";for(let e=0;e<ignore.length;e++){const regex=new RegExp(`<${ignore[e]}[^>]*>((.|\n)*?)</${ignore[e]}>`,"g");html=html.replace(regex,"protect"===mode?protectElement:unprotectElement)}return html},protectElement=(match,capture)=>match.replace(capture,(match=>match.replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/\n/g,"&#10;").replace(/\r/g,"&#13;").replace(/\s/g,"&nbsp;"))),unprotectElement=(match,capture)=>match.replace(capture,(match=>match.replace(/&lt;/g,"<").replace(/&gt;/g,">").replace(/&#10;/g,"\n").replace(/&#13;/g,"\r").replace(/&nbsp;/g," "))),validateConfig=config=>{var _config$ignore,_config$trim;if("object"!=typeof config)throw new Error("Config must be an object.");if(!(Object.hasOwn(config,"tab_size")||Object.hasOwn(config,"strict")||Object.hasOwn(config,"ignore")||Object.hasOwn(config,"trim")))return CONFIG;let tab_size=config.tab_size;if(tab_size){if("number"!=typeof tab_size)throw new Error("Tab size must be a number.");if(!Number.isSafeInteger(tab_size))throw new Error(`Tab size ${tab_size} is not safe. See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger for more info.`);if(tab_size=Math.floor(tab_size),tab_size<1||tab_size>16)throw new Error("Tab size out of range. Expecting 1 to 16.");config.tab_size=tab_size}if(Object.hasOwn(config,"strict")&&"boolean"!=typeof config.strict)throw new Error("Strict config must be a boolean.");if(Object.hasOwn(config,"ignore")&&(!Array.isArray(config.ignore)||null===(_config$ignore=config.ignore)||void 0===_config$ignore||!_config$ignore.every((e=>"string"==typeof e))))throw new Error("Ignore config must be an array of strings.");if(Object.hasOwn(config,"trim")&&(!Array.isArray(config.trim)||null===(_config$trim=config.trim)||void 0===_config$trim||!_config$trim.every((e=>"string"==typeof e))))throw new Error("Trim config must be an array of strings.");return((dconfig,config)=>mergeObjects(structuredClone(dconfig),config))(CONFIG,config)},void_elements=["area","base","br","col","embed","hr","img","input","link","meta","param","source","track","wbr"],entify=function(html){let minify=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return html=html.replace(/<textarea[^>]*>((.|\n)*?)<\/textarea>/g,((match,capture)=>match.replace(capture,(match=>match.replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&apos;").replace(/\n/g,"&#10;").replace(/\r/g,"&#13;").replace(/\s/g,"&nbsp;"))))),minify&&(html=html.replace(/<textarea[^>]*>((.|\n)*?)<\/textarea>/g,((match,capture)=>match=(match=match.replace(capture,(match=>match.replace(/\n|\t/g,"").replace(/[a-z]+="\s*"/gi,"").replace(/>\s+</g,"><").replace(/\s+/g," ")))).replace(/\s+/g," ").replace(/\s>/g,">").replace(/>\s/g,">").replace(/\s</g,"<").replace(/class=["']\s/g,(match=>match.replace(/\s/g,""))).replace(/(class=.*)\s(["'])/g,"$1$2")))),html};let strict,trim;const convert={line:[]},preprocess=html=>(html=function(html){return arguments.length>1&&void 0!==arguments[1]&&!arguments[1]||isHtml(html)?html.replace(/<([a-zA-Z\-0-9]+)[^>]*>/g,((match,name)=>void_elements.indexOf(name)>-1?`${match.substring(0,match.length-1)} />`.replace(/\/\s\//g,"/"):match.replace(/[\s]?\/>/g,`></${name}>`))):html}(html,!1),trim.length>0&&(html=((html,trim)=>{for(let e=0;e<trim.length;e++){const leading_whitespace=new RegExp(`(<${trim[e]}[^>]*>)\\s+`,"g"),trailing_whitespace=new RegExp(`\\s+(</${trim[e]}>)`,"g");html=html.replace(leading_whitespace,"$1").replace(trailing_whitespace,"$1")}return html})(html,trim)),html=function(html){return arguments.length>1&&void 0!==arguments[1]&&!arguments[1]||isHtml(html)?(html=entify(html)).replace(/\n|\t/g,"").replace(/[a-z]+="\s*"/gi,"").replace(/>\s+</g,"><").replace(/\s+/g," ").replace(/\s>/g,">").replace(/<\s\//g,"</").replace(/>\s/g,">").replace(/\s</g,"<").replace(/class=["']\s/g,(match=>match.replace(/\s/g,""))).replace(/(class=.*)\s(["'])/g,"$1$2"):html}(html,!1),html=(html=>{convert.line=[];let i=-1;return html.replace(/<[^>]*>/g,(match=>(convert.line.push(match),i++,`\n[#-# : ${i} : ${match} : #-#]\n`)))})(html));return _exports.default=(html,config)=>{if(!isHtml(html))return html;const validated_config=config?validateConfig(config):CONFIG;strict=validated_config.strict;const ignore=validated_config.ignore.length>0;return trim=validated_config.trim,ignore&&(html=ignoreElement(html,validated_config.ignore)),html=((html,step)=>{let indents="";convert.line.forEach(((source,index)=>{html=html.replace(/\n+/g,"\n").replace(`[#-# : ${index} : ${source} : #-#]`,(match=>{let subtrahend=0;const prevLine=`[#-# : ${index-1} : ${convert.line[index-1]} : #-#]`;indents+="0",0===index&&subtrahend++,match.indexOf(`#-# : ${index} : </`)>-1&&subtrahend++,prevLine.indexOf("<!doctype")>-1&&subtrahend++,prevLine.indexOf("\x3c!--")>-1&&subtrahend++,prevLine.indexOf("/> : #-#")>-1&&subtrahend++,prevLine.indexOf(`#-# : ${index-1} : </`)>-1&&subtrahend++;const offset=indents.length-subtrahend;if(indents=indents.substring(0,offset),strict&&match.indexOf("\x3c!--")>-1)return"";const result=match.replace(`[#-# : ${index} : `,"").replace(" : #-#]","");return result.padStart(result.length+step*offset)}))})),html=html.replace(/>[^<]*?[^><\/\s][^<]*?<\/|>\s+[^><\s]|<script[^>]*>\s+<\/script>|<(\w+)>\s+<\/(\w+)|<([\w\-]+)[^>]*[^\/]>\s+<\/([\w\-]+)>/g,(match=>match.replace(/\n|\t|\s{2,}/g,""))),strict&&(html=html.replace(/\s\/>/g,">"));const lead_newline_check=html.substring(0,1),tail_newline_check=html.substring(html.length-1);return"\n"===lead_newline_check&&(html=html.substring(1,html.length)),"\n"===tail_newline_check&&(html=html.substring(0,html.length-1)),html})(html=preprocess(html),validated_config.tab_size),ignore&&(html=ignoreElement(html,validated_config.ignore,"unprotect")),html},_exports.default}));

//# sourceMappingURL=htmlfy-lazy.min.js.map