{"version":3,"file":"common.min.js","sources":["../src/common.js"],"sourcesContent":["/* eslint-disable max-len */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny CodePro plugin.\n *\n * @module      tiny_codepro/plugin\n * @copyright   2023-2025 Josep Mulet Pol <pep.mulet@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as Config from 'core/config';\n\nconst baseUrl = `${Config.wwwroot}/lib/editor/tiny/plugins/codepro`;\nconst component = 'tiny_codepro';\n\n// --- Helper function to parse version string into comparable numbers ---\n// This handles strings like \"6\", \"6.0\", \"6.2\", \"6.2.1\" and returns [major, minor, patch...]\n// It also handles null, undefined, and blank strings by returning null.\n/**\n * @param {string | undefined | null} version\n * @returns {number[] | null}\n */\nfunction parseMinorVersion(version) {\n        if (version === null || version === undefined || (typeof version === 'string' && version.trim() === '')) {\n            return null;\n        }\n        // Convert to string to ensure split works\n        const versionStr = String(version);\n        return versionStr.split('.').map(Number);\n}\n\n/**\n * @param {string | number | null | undefined} majorVersion - Expected to be a whole integer (e.g., \"6\" or 6). Can be null, undefined, or blank.\n * @param {string | number | null | undefined} minorVersion - Expected format \"6.2\" or 6.2 (can be decimal like \"6.2.1\"). Can also be null, undefined, or blank.\n * @returns {boolean} - Whether the version passed is at least 6 / 6.2. Returns false for invalid, null, undefined, or blank inputs.\n */\nfunction isPanelCapable(majorVersion, minorVersion) {\n    const REQUIRED_MAJOR = 6;\n    const REQUIRED_MINOR_WHOLE = 6; // Refers to the \"6\" in \"6.2\"\n    const REQUIRED_MINOR_DECIMAL = 2; // Refers to the \".2\" in \"6.2\"\n\n    // --- Parse majorVersion ---\n    // Since majorVersion is assumed to be a whole integer, we can use parseInt directly.\n    let panelMajor;\n    if (majorVersion === null || majorVersion === undefined || (typeof majorVersion === 'string' && majorVersion.trim() === '')) {\n        panelMajor = null; // Treat as invalid if null, undefined, or blank\n    } else {\n        panelMajor = parseInt(String(majorVersion), 10);\n        // If parseInt results in NaN (e.g., input was \"abc\"), treat as invalid\n        if (isNaN(panelMajor)) {\n            panelMajor = null;\n        }\n    }\n\n    // --- Parse minorVersion ---\n    const parsedMinorVersion = parseMinorVersion(minorVersion);\n\n    // If either version is invalid/unparseable, consider it capable.\n    if (panelMajor === null || parsedMinorVersion === null || parsedMinorVersion.length !== 2) {\n        return true;\n    }\n\n    // --- Compare majorVersion against '6' ---\n    if (panelMajor < REQUIRED_MAJOR) {\n        return false; // E.g., majorVersion is 5.\n    } else if (panelMajor > REQUIRED_MAJOR) {\n        return true; // E.g., majorVersion is 7.\n    }\n\n    // --- If majorVersion is exactly '6', then compare minorVersion against '6.2' ---\n    // (This block only executes if panelMajor === REQUIRED_MAJOR)\n\n    const panelMinorMajorPart = parsedMinorVersion[0] || 0;   // E.g., 6 from \"6.2\"\n    const panelMinorDecimalPart = parsedMinorVersion[1] || 0; // E.g., 2 from \"6.2\", default to 0 if no minor part (e.g., \"6\")\n\n    // First, compare the main part of the minorVersion string (e.g., the '6' in \"6.2\")\n    if (panelMinorMajorPart < REQUIRED_MINOR_WHOLE) {\n        return false; // E.g., minorVersion \"5.x\" when required is \"6.2\"\n    } else if (panelMinorMajorPart > REQUIRED_MINOR_WHOLE) {\n        return true; // E.g., minorVersion \"7.x\" when required is \"6.2\"\n    }\n\n    // If the main part of the minorVersion string is exactly '6', then compare the decimal part (e.g., the '.2')\n    // (This block only executes if panelMinorMajorPart === REQUIRED_MINOR_WHOLE)\n    return panelMinorDecimalPart >= REQUIRED_MINOR_DECIMAL;\n}\n\n\nexport default {\n    baseUrl,\n    component,\n    pluginName: `${component}/plugin`,\n    icon: `${component}`,\n    TINY_MARKER_CLASS: 'tiny_widgethub-marker',\n    CM_MARKER: String.fromCharCode(0),\n    isPanelCapable\n};\n"],"names":["baseUrl","wwwroot","component","pluginName","icon","TINY_MARKER_CLASS","CM_MARKER","String","fromCharCode","isPanelCapable","majorVersion","minorVersion","panelMajor","trim","parseInt","isNaN","parsedMinorVersion","version","split","map","Number","length","panelMinorMajorPart","panelMinorDecimalPart"],"mappings":"kcAsGe,CACXA,QA7Ea;;;;;;;eAASC,0CA8EtBC,UA7Ec,eA8EdC,WAAa,sBACbC,KAAO,eACPC,kBAAmB,wBACnBC,UAAWC,OAAOC,aAAa,GAC/BC,wBA3DoBC,aAAcC,kBAO9BC,WACAF,MAAAA,cAAgF,iBAAjBA,cAAqD,KAAxBA,aAAaG,OACzGD,WAAa,MAEbA,WAAaE,SAASP,OAAOG,cAAe,IAExCK,MAAMH,cACNA,WAAa,aAKfI,mBAhCEC,OADeA,QAiCsBN,eAhC4B,iBAAZM,SAA2C,KAAnBA,QAAQJ,OAC9E,KAGQN,OAAOU,SACRC,MAAM,KAAKC,IAAIC,YANdH,WAoCJ,OAAfL,YAA8C,OAAvBI,oBAA6D,IAA9BA,mBAAmBK,cAClE,KAIPT,WA1BmB,SA2BZ,EACJ,GAAIA,WA5BY,SA6BZ,QAMLU,oBAAsBN,mBAAmB,IAAM,EAC/CO,sBAAwBP,mBAAmB,IAAM,UAGnDM,oBAtCyB,KAwClBA,oBAxCkB,GA8CtBC,uBA7CwB"}