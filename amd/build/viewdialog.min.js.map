{"version":3,"file":"viewdialog.min.js","sources":["../src/viewdialog.js"],"sourcesContent":["/* eslint-disable no-console */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport {createModal} from \"./modal\";\nimport ModalEvents from 'core/modal_events';\nimport {getPref, setPref} from \"./preferences\";\nimport {getDefaultUI, isAutoFormatHTML, isSyncCaret} from \"./options\";\nimport {blackboard, requireCm6Pro} from \"./commands\";\nimport {MARKER} from \"./common\";\n\n/**\n * Tiny CodePro plugin.\n *\n * @module      tiny_codepro/plugin\n * @copyright   2023-2025 Josep Mulet Pol <pep.mulet@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nconst dialogQuery = '[role=\"document\"], [data-region=\"modal\"]';\n\n/**\n * Utility to toggle a class in an HTML element\n * @param {HTMLElement} el - The Element\n * @param {string[]} classList\n */\nconst toggleClasses = function(el, classList) {\n    const cl = el.classList;\n    classList.forEach(className => {\n        cl.toggle(className);\n    });\n};\n\nlet isLoading = false;\n/**\n * Shows the dialog\n * @param {TinyMCE} editor\n */\nexport const showDialog = async(editor) => {\n    if (isLoading) {\n        return;\n    }\n    isLoading = true;\n    const {modal, codeEditorInstance} = await createDialog(editor);\n    isLoading = false;\n\n    if (blackboard.state) {\n        codeEditorInstance?.setState(blackboard.state);\n        blackboard.state = null;\n    } else {\n        let html;\n        const syncCaret = isSyncCaret(editor);\n        let markerNode;\n        if (syncCaret) {\n            markerNode = document.createElement(\"SPAN\");\n            markerNode.innerHTML = '&nbsp;';\n            markerNode.classList.add('CmCaReT');\n            const currentNode = editor.selection.getStart();\n            currentNode.append(markerNode);\n        }\n        // eslint-disable-next-line camelcase\n        html = editor.getContent({source_view: true});\n        if (syncCaret) {\n            html = html.replace(/<span\\s+class=\"CmCaReT\"([^>]*)>([^<]*)<\\/span>/gm, MARKER);\n            markerNode.remove();\n        }\n\n        // According to global preference prettify code when opening the editor\n        if (isAutoFormatHTML(editor)) {\n            html = codeEditorInstance?.prettifyCode(html);\n        }\n\n        codeEditorInstance?.setValue(html);\n    }\n\n    modal.show();\n    setTimeout(() => codeEditorInstance?.focus(), 500);\n};\n\n/**\n * Returns the modal instance\n * @param {TinyMCE} editor\n * @returns {Promise<{modal: Modal, codeEditorInstance: *}>}\n */\nconst createDialog = async(editor) => {\n    const defaultUI = getDefaultUI(editor) ?? 'dialog';\n    const canUserSwitchUI = defaultUI.startsWith('user:');\n\n    const data = {\n        elementid: Math.random().toString(32).substring(2),\n        canUserSwitchUI\n    };\n\n    // Show modal with buttons.\n    const modal = await createModal({\n        templateContext: data\n    });\n\n    modal.getRoot().find(\".modal-dialog.modal-lg\").addClass(\"tiny_codepro-dlg\");\n    // Disable keyboard events (ESC key) on this modal\n    modal.getRoot().off('keydown');\n    // Prevent modal from closing on outside clicks\n    modal.getRoot().on(ModalEvents.outsideClick, (evt) => {\n        evt.preventDefault();\n    });\n    modal.body.css(\"overflow-y\", \"overlay\");\n    // Override styles imposed by body.tox-fullscreen on modals\n    modal.header.css('height', '61.46px');\n    modal.header.css('padding', '1rem 1rem');\n\n    // TODO, it may take some time the first run. Show a spinner!!!\n    const CodeProEditor = await requireCm6Pro();\n    // Remove spinner\n\n    const targetElem = modal.body.find('.tiny_codepro-editor-area')[0];\n    const options = {\n        theme: getPref(\"theme\", \"light\"),\n        fontSize: getPref(\"fontsize\", 11),\n        lineWrapping: getPref(\"wrap\", \"true\") === \"true\",\n    };\n    const codeEditorInstance = new CodeProEditor(targetElem, options);\n\n    // Issue, editor var does not get updated\n    // Bind save action to the correct editor\n    modal.footer.find(\"button.btn[data-action]\").on(\"click\", (evt) => {\n        if (evt.target.classList.contains(\"btn-primary\")) {\n            const shouldSyncCaret = isSyncCaret(editor);\n            const htmlWithMarker = codeEditorInstance.getValue(shouldSyncCaret)\n                .replace(MARKER, '<span class=\"CmCaReT\">&nbsp;</span>');\n            // Do it in a transaction\n            editor.focus();\n            editor.undoManager.transact(() => {\n                editor.setContent(htmlWithMarker ?? '');\n            });\n\n            // After showing the Tiny editor, the scroll position is lost\n            // Restore scroll position\n            console.log(\"Restore cursor\");\n            const currentNode = editor.dom.select('span.CmCaReT')[0];\n            if (!currentNode) {\n                // Simply set the previous scroll position if selected node is not found\n                const previousScroll = blackboard.scrolls[editor.id];\n                editor.contentWindow.scrollTo(0, previousScroll);\n            } else {\n                // Scroll the iframe's contentWindow until the currentNode is visible\n                editor.selection.setCursorLocation(currentNode, 0);\n                editor.selection.collapse();\n                const iframeHeight = editor.container.querySelector('iframe').clientHeight;\n                const scrollPos = Math.max(currentNode.offsetTop - 0.5 * iframeHeight, 0);\n                editor.contentWindow.scrollTo(0, scrollPos);\n                currentNode.remove();\n            }\n            editor.nodeChanged();\n        }\n        modal.hide();\n    });\n\n    modal.footer.find(\"button.btn.btn-light\").on(\"click\", (evt) => {\n        evt.preventDefault();\n        const ds = evt.currentTarget.dataset;\n        const icon = evt.currentTarget.querySelector(\"i.fa\");\n        const $dlgElem = modal.getRoot().find(dialogQuery);\n        if (ds.fs) {\n            if (ds.fs === \"false\") {\n                // Set fullscreen mode\n                ds.fs = \"true\";\n                modal.header.hide();\n                $dlgElem.removeClass(\"modal-dialog modal-lg modal-dialog-scrollable\");\n                $dlgElem.addClass(\"tiny_codepro-fullscreen\");\n            } else {\n                // Set to modal-lg\n                ds.fs = \"false\";\n                modal.header.show();\n                $dlgElem.removeClass(\"tiny_codepro-fullscreen\");\n                $dlgElem.addClass(\"modal-dialog modal-lg modal-dialog-scrollable\");\n            }\n            setPref(\"fs\", ds.fs, true);\n        } else if (ds.theme) {\n            if (ds.theme === \"light\") {\n                ds.theme = \"dark\";\n                codeEditorInstance.setTheme(\"dark\");\n                $dlgElem.addClass(\"tiny_codepro-dark\");\n            } else {\n                ds.theme = \"light\";\n                codeEditorInstance.setTheme(\"light\");\n                $dlgElem.removeClass(\"tiny_codepro-dark\");\n            }\n            toggleClasses(icon, [\"fa-sun-o\", \"fa-moon-o\"]);\n            setPref(\"theme\", ds.theme, true);\n        } else if (ds.wrap) {\n            if (ds.wrap === \"true\") {\n                ds.wrap = false;\n                codeEditorInstance?.setLineWrapping(false);\n            } else {\n                ds.wrap = true;\n                codeEditorInstance?.setLineWrapping(true);\n            }\n            setPref(\"wrap\", ds.wrap, true);\n            toggleClasses(icon, [\"fa-exchange\", \"fa-long-arrow-right\"]);\n        } else if (ds.prettify !== undefined) {\n            codeEditorInstance?.prettify();\n        } else if (ds.view !== undefined) {\n            blackboard.state = codeEditorInstance.getState();\n            // Destroy modal\n            modal.hide();\n            // Set user preference\n            setPref('view', 'panel', true);\n            // Call the action again\n            editor.execCommand('mceCodeProEditor', false);\n        }\n    });\n\n    modal.getRoot().on(ModalEvents.hidden, () => {\n        // Get rid of the codeEditor and the modal itself\n        codeEditorInstance?.destroy();\n        modal?.destroy();\n    });\n\n    // Setting stored preferences\n    const currentFs = getPref(\"fs\", \"false\");\n    const currentTheme = getPref(\"theme\", \"light\");\n    const currentWrap = getPref(\"wrap\", \"true\");\n\n    if (currentFs === \"true\") {\n        modal.footer.find(\"button.btn.btn-light[data-fs]\").click();\n    }\n    if (currentTheme !== \"light\") {\n        // Toggle button state\n        modal.footer.find('button.btn-light[data-theme] i').\n            toggleClass(\"fa-sun-o\", \"fa-moon-o\");\n        modal.getRoot().find(dialogQuery)\n            .addClass(\"tiny_codepro-dark\");\n    }\n    if (currentWrap !== \"true\") {\n        // Toggle button state\n        modal.footer.find('button.btn-light[data-wrap] i')\n            .toggleClass(\"fa-exchange\", \"fa-long-arrow-right\");\n    }\n    return {modal, codeEditorInstance};\n};"],"names":["dialogQuery","toggleClasses","el","classList","cl","forEach","className","toggle","isLoading","async","modal","codeEditorInstance","createDialog","editor","blackboard","state","setState","html","syncCaret","markerNode","document","createElement","innerHTML","add","selection","getStart","append","getContent","source_view","replace","MARKER","remove","prettifyCode","setValue","show","setTimeout","focus","canUserSwitchUI","startsWith","data","elementid","Math","random","toString","substring","templateContext","getRoot","find","addClass","off","on","ModalEvents","outsideClick","evt","preventDefault","body","css","header","theme","fontSize","lineWrapping","footer","target","contains","shouldSyncCaret","htmlWithMarker","getValue","undoManager","transact","setContent","console","log","currentNode","dom","select","setCursorLocation","collapse","iframeHeight","container","querySelector","clientHeight","scrollPos","max","offsetTop","contentWindow","scrollTo","previousScroll","scrolls","id","nodeChanged","hide","ds","currentTarget","dataset","icon","$dlgElem","fs","removeClass","setTheme","wrap","setLineWrapping","undefined","prettify","view","getState","execCommand","hidden","destroy","currentFs","currentTheme","currentWrap","click","toggleClass"],"mappings":"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"}