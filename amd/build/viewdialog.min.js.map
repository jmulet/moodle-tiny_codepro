{"version":3,"file":"viewdialog.min.js","sources":["../src/viewdialog.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport {createModal} from \"./modal\";\nimport ModalEvents from 'core/modal_events';\nimport {getPref, setPref} from \"./preferences\";\nimport {getDefaultUI, isAutoFormatHTML, isSyncCaret} from \"./options\";\nimport {blackboard, requireCm6Pro} from \"./commands\";\nimport {MARKER} from \"./common\";\n\n/**\n * Tiny CodePro plugin.\n *\n * @module      tiny_codepro/plugin\n * @copyright   2023-2025 Josep Mulet Pol <pep.mulet@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nconst dialogQuery = '[role=\"document\"], [data-region=\"modal\"]';\n\n/**\n * Utility to toggle a class in an HTML element\n * @param {HTMLElement} el - The Element\n * @param {string[]} classList\n */\nconst toggleClasses = function(el, classList) {\n    const cl = el.classList;\n    classList.forEach(className => {\n        cl.toggle(className);\n    });\n};\n\nlet isLoading = false;\n/**\n * Shows the dialog\n * @param {TinyMCE} editor\n */\nexport const showDialog = async(editor) => {\n    if (isLoading) {\n        return;\n    }\n    isLoading = true;\n    const {modal, codeEditorInstance} = await createDialog(editor);\n    isLoading = false;\n\n    if (blackboard.state) {\n        codeEditorInstance?.setState(blackboard.state);\n        blackboard.state = null;\n    } else {\n        let html;\n        const syncCaret = isSyncCaret(editor);\n        let markerNode;\n        if (syncCaret) {\n            markerNode = document.createElement(\"SPAN\");\n            markerNode.innerHTML = '&nbsp;';\n            markerNode.classList.add('CmCaReT');\n            const currentNode = editor.selection.getStart();\n            currentNode.append(markerNode);\n        }\n        // eslint-disable-next-line camelcase\n        html = editor.getContent({source_view: true});\n        if (syncCaret) {\n            html = html.replace(/<span\\s+class=\"CmCaReT\"([^>]*)>([^<]*)<\\/span>/gm, MARKER);\n            markerNode.remove();\n        }\n\n        // According to global preference prettify code when opening the editor\n        if (isAutoFormatHTML(editor)) {\n            html = codeEditorInstance?.prettifyCode(html);\n        }\n\n        codeEditorInstance?.setValue(html);\n    }\n\n    modal.show();\n    setTimeout(() => codeEditorInstance?.focus(), 500);\n};\n\n/**\n * Returns the modal instance\n * @param {TinyMCE} editor\n * @returns {Promise<{modal: Modal, codeEditorInstance: *}>}\n */\nconst createDialog = async(editor) => {\n    const defaultUI = getDefaultUI(editor) ?? 'dialog';\n    const canUserSwitchUI = defaultUI.startsWith('user:');\n\n    const data = {\n        elementid: Math.random().toString(32).substring(2),\n        canUserSwitchUI\n    };\n\n    // Show modal with buttons.\n    const modal = await createModal({\n        templateContext: data\n    });\n\n    modal.getRoot().find(\".modal-dialog.modal-lg\").addClass(\"tiny_codepro-dlg\");\n    // Disable keyboard events (ESC key) on this modal\n    modal.getRoot().off('keydown');\n    // Prevent modal from closing on outside clicks\n    modal.getRoot().on(ModalEvents.outsideClick, (evt) => {\n        evt.preventDefault();\n    });\n    modal.body.css(\"overflow-y\", \"overlay\");\n    // Override styles imposed by body.tox-fullscreen on modals\n    modal.header.css('height', '61.46px');\n    modal.header.css('padding', '1rem 1rem');\n\n    // TODO, it may take some time the first run. Show a spinner!!!\n    const CodeProEditor = await requireCm6Pro();\n    // Remove spinner\n\n    const targetElem = modal.body.find('.tiny_codepro-editor-area')[0];\n    const codeEditorInstance = new CodeProEditor(targetElem);\n\n    // Issue, editor var does not get updated\n    // Bind save action to the correct editor\n    modal.footer.find(\"button.btn[data-action]\").on(\"click\", (evt) => {\n        if (evt.target.classList.contains(\"btn-primary\")) {\n            // eslint-disable-next-line camelcase\n            const updatedCode = codeEditorInstance?.getValue({source_view: true})\n                    .replace(MARKER, '<span class=\"CmCaReT\">&nbsp;</span>');\n            // Do it in a transaction\n            editor.focus();\n            editor.undoManager.transact(() => {\n                editor.setContent(updatedCode ?? '');\n            });\n            // Restore cursor position\n            const node = editor.dom.select('span.CmCaReT');\n            if (node) {\n              editor.selection.setCursorLocation(node);\n            }\n            editor.nodeChanged();\n        }\n        modal.hide();\n    });\n\n    modal.footer.find(\"button.btn.btn-light\").on(\"click\", (evt) => {\n        evt.preventDefault();\n        const ds = evt.currentTarget.dataset;\n        const icon = evt.currentTarget.querySelector(\"i.fa\");\n        const $dlgElem = modal.getRoot().find(dialogQuery);\n        if (ds.fs) {\n            if (ds.fs === \"false\") {\n                // Set fullscreen mode\n                ds.fs = \"true\";\n                modal.header.hide();\n                $dlgElem.removeClass(\"modal-dialog modal-lg modal-dialog-scrollable\");\n                $dlgElem.addClass(\"tiny_codepro-fullscreen\");\n            } else {\n                // Set to modal-lg\n                ds.fs = \"false\";\n                modal.header.show();\n                $dlgElem.removeClass(\"tiny_codepro-fullscreen\");\n                $dlgElem.addClass(\"modal-dialog modal-lg modal-dialog-scrollable\");\n            }\n            setPref(\"fs\", ds.fs, true);\n        } else if (ds.theme) {\n            if (ds.theme === \"light\") {\n                ds.theme = \"dark\";\n                codeEditorInstance.setTheme(\"dark\");\n                $dlgElem.addClass(\"tiny_codepro-dark\");\n            } else {\n                ds.theme = \"light\";\n                codeEditorInstance.setTheme(\"light\");\n                $dlgElem.removeClass(\"tiny_codepro-dark\");\n            }\n            toggleClasses(icon, [\"fa-sun-o\", \"fa-moon-o\"]);\n            setPref(\"theme\", ds.theme, true);\n        } else if (ds.wrap) {\n            if (ds.wrap === \"true\") {\n                ds.wrap = false;\n                codeEditorInstance?.setLineWrapping(false);\n            } else {\n                ds.wrap = true;\n                codeEditorInstance?.setLineWrapping(true);\n            }\n            setPref(\"wrap\", ds.wrap, true);\n            toggleClasses(icon, [\"fa-exchange\", \"fa-long-arrow-right\"]);\n        } else if (ds.prettify !== undefined) {\n            codeEditorInstance?.prettify();\n        } else if (ds.view !== undefined) {\n            blackboard.state = codeEditorInstance.getState();\n            // Destroy modal\n            modal.hide();\n            // Set user preference\n            setPref('view', 'panel', true);\n            // Call the action again\n            editor.execCommand('mceCodeProEditor', false);\n        }\n    });\n\n    modal.getRoot().on(ModalEvents.hidden, () => {\n        // Get rid of the codeEditor and the modal itself\n        codeEditorInstance?.destroy();\n        modal?.destroy();\n    });\n\n    // Setting stored preferences\n    const currentTheme = getPref(\"theme\", \"light\");\n    const currentWrap = getPref(\"wrap\", \"true\");\n    const currentFs = getPref(\"fs\", \"false\");\n\n    if (currentTheme !== \"light\") {\n        modal.footer.find(\"button.btn.btn-light[data-theme]\").click();\n    }\n    if (currentWrap === \"true\") {\n        modal.footer.find(\"button.btn.btn-light[data-wrap]\").click();\n    }\n    if (currentFs === \"true\") {\n        modal.footer.find(\"button.btn.btn-light[data-fs]\").click();\n    }\n    return {modal, codeEditorInstance};\n};"],"names":["toggleClasses","el","classList","cl","forEach","className","toggle","isLoading","async","modal","codeEditorInstance","createDialog","editor","blackboard","state","setState","html","syncCaret","markerNode","document","createElement","innerHTML","add","selection","getStart","append","getContent","source_view","replace","MARKER","remove","prettifyCode","setValue","show","setTimeout","focus","canUserSwitchUI","startsWith","data","elementid","Math","random","toString","substring","templateContext","getRoot","find","addClass","off","on","ModalEvents","outsideClick","evt","preventDefault","body","css","header","footer","target","contains","updatedCode","getValue","undoManager","transact","setContent","node","dom","select","setCursorLocation","nodeChanged","hide","ds","currentTarget","dataset","icon","querySelector","$dlgElem","fs","removeClass","theme","setTheme","wrap","setLineWrapping","undefined","prettify","view","getState","execCommand","hidden","destroy","currentTheme","currentWrap","currentFs","click"],"mappings":"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"}