define("tiny_codepro/viewdialog",["exports","./modal","core/modal_events","./preferences","./options","./commands","./common"],(function(_exports,_modal,_modal_events,_preferences,_options,_commands,_common){var obj;
/**
   * Tiny CodePro plugin.
   *
   * @module      tiny_codepro/plugin
   * @copyright   2023-2025 Josep Mulet Pol <pep.mulet@gmail.com>
   * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.showDialog=void 0,_modal_events=(obj=_modal_events)&&obj.__esModule?obj:{default:obj};const dialogQuery='[role="document"], [data-region="modal"]',toggleClasses=function(el,classList){const cl=el.classList;classList.forEach((className=>{cl.toggle(className)}))};let isLoading=!1;_exports.showDialog=async editor=>{if(isLoading)return;isLoading=!0;const{modal:modal,codeEditorInstance:codeEditorInstance}=await createDialog(editor);if(isLoading=!1,_commands.blackboard.state)null==codeEditorInstance||codeEditorInstance.setState(_commands.blackboard.state),_commands.blackboard.state=null;else{let html;const syncCaret=(0,_options.isSyncCaret)(editor);let markerNode;if(syncCaret){markerNode=document.createElement("SPAN"),markerNode.innerHTML="&nbsp;",markerNode.classList.add("CmCaReT");editor.selection.getStart().append(markerNode)}html=editor.getContent({source_view:!0}),syncCaret&&(html=html.replace(/<span\s+class="CmCaReT"([^>]*)>([^<]*)<\/span>/gm,_common.MARKER),markerNode.remove()),(0,_options.isAutoFormatHTML)(editor)&&(html=null==codeEditorInstance?void 0:codeEditorInstance.prettifyCode(html)),null==codeEditorInstance||codeEditorInstance.setValue(html)}modal.show(),setTimeout((()=>null==codeEditorInstance?void 0:codeEditorInstance.focus()),500)};const createDialog=async editor=>{const canUserSwitchUI=((0,_options.getDefaultUI)(editor)??"dialog").startsWith("user:"),data={elementid:Math.random().toString(32).substring(2),canUserSwitchUI:canUserSwitchUI},modal=await(0,_modal.createModal)({templateContext:data});modal.getRoot().find(".modal-dialog.modal-lg").addClass("tiny_codepro-dlg"),modal.getRoot().off("keydown"),modal.getRoot().on(_modal_events.default.outsideClick,(evt=>{evt.preventDefault()})),modal.body.css("overflow-y","overlay"),modal.header.css("height","61.46px"),modal.header.css("padding","1rem 1rem");const codeEditorInstance=new(await(0,_commands.requireCm6Pro)())(modal.body.find(".tiny_codepro-editor-area")[0],{theme:(0,_preferences.getPref)("theme","light"),fontSize:(0,_preferences.getPref)("fontsize",11),lineWrapping:"true"===(0,_preferences.getPref)("wrap","true")});modal.footer.find("button.btn[data-action]").on("click",(evt=>{if(evt.target.classList.contains("btn-primary")){const shouldSyncCaret=(0,_options.isSyncCaret)(editor),htmlWithMarker=codeEditorInstance.getValue(shouldSyncCaret).replace(_common.MARKER,'<span class="CmCaReT">&nbsp;</span>');editor.focus(),editor.undoManager.transact((()=>{editor.setContent(htmlWithMarker??"")})),console.log("Restore cursor");const currentNode=editor.dom.select("span.CmCaReT")[0];if(currentNode){editor.selection.setCursorLocation(currentNode,0),editor.selection.collapse();const iframeHeight=editor.container.querySelector("iframe").clientHeight,scrollPos=Math.max(currentNode.offsetTop-.5*iframeHeight,0);editor.contentWindow.scrollTo(0,scrollPos),currentNode.remove()}else{const previousScroll=_commands.blackboard.scrolls[editor.id];editor.contentWindow.scrollTo(0,previousScroll)}editor.nodeChanged()}modal.hide()})),modal.footer.find("button.btn.btn-light").on("click",(evt=>{evt.preventDefault();const ds=evt.currentTarget.dataset,icon=evt.currentTarget.querySelector("i.fa"),$dlgElem=modal.getRoot().find(dialogQuery);ds.fs?("false"===ds.fs?(ds.fs="true",modal.header.hide(),$dlgElem.removeClass("modal-dialog modal-lg modal-dialog-scrollable"),$dlgElem.addClass("tiny_codepro-fullscreen")):(ds.fs="false",modal.header.show(),$dlgElem.removeClass("tiny_codepro-fullscreen"),$dlgElem.addClass("modal-dialog modal-lg modal-dialog-scrollable")),(0,_preferences.setPref)("fs",ds.fs,!0)):ds.theme?("light"===ds.theme?(ds.theme="dark",codeEditorInstance.setTheme("dark"),$dlgElem.addClass("tiny_codepro-dark")):(ds.theme="light",codeEditorInstance.setTheme("light"),$dlgElem.removeClass("tiny_codepro-dark")),toggleClasses(icon,["fa-sun-o","fa-moon-o"]),(0,_preferences.setPref)("theme",ds.theme,!0)):ds.wrap?("true"===ds.wrap?(ds.wrap=!1,null==codeEditorInstance||codeEditorInstance.setLineWrapping(!1)):(ds.wrap=!0,null==codeEditorInstance||codeEditorInstance.setLineWrapping(!0)),(0,_preferences.setPref)("wrap",ds.wrap,!0),toggleClasses(icon,["fa-exchange","fa-long-arrow-right"])):void 0!==ds.prettify?null==codeEditorInstance||codeEditorInstance.prettify():void 0!==ds.view&&(_commands.blackboard.state=codeEditorInstance.getState(),modal.hide(),(0,_preferences.setPref)("view","panel",!0),editor.execCommand("mceCodeProEditor",!1))})),modal.getRoot().on(_modal_events.default.hidden,(()=>{null==codeEditorInstance||codeEditorInstance.destroy(),null==modal||modal.destroy()}));const currentFs=(0,_preferences.getPref)("fs","false"),currentTheme=(0,_preferences.getPref)("theme","light"),currentWrap=(0,_preferences.getPref)("wrap","true");return"true"===currentFs&&modal.footer.find("button.btn.btn-light[data-fs]").click(),"light"!==currentTheme&&(modal.footer.find("button.btn-light[data-theme] i").toggleClass("fa-sun-o","fa-moon-o"),modal.getRoot().find(dialogQuery).addClass("tiny_codepro-dark")),"true"!==currentWrap&&modal.footer.find("button.btn-light[data-wrap] i").toggleClass("fa-exchange","fa-long-arrow-right"),{modal:modal,codeEditorInstance:codeEditorInstance}}}));

//# sourceMappingURL=viewdialog.min.js.map